
uar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004364  08004364  00005364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004424  08004424  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004424  08004424  00005424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800442c  0800442c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800442c  0800442c  0000542c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004430  08004430  00005430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004434  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000005c  08004490  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08004490  00006290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac37  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019cb  00000000  00000000  00010cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  00012690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000799  00000000  00000000  00013040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015bc0  00000000  00000000  000137d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf70  00000000  00000000  00029399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087749  00000000  00000000  00036309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bda52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d60  00000000  00000000  000bda98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000037  00000000  00000000  000c07f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800434c 	.word	0x0800434c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800434c 	.word	0x0800434c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Read_accel_temp_gyro>:
int16_t gyro_x, gyro_y, gyro_z;
int16_t temp;
int16_t mag_x, mag_y, mag_z;
int32_t baro_temp, baro_pressure;

void Read_accel_temp_gyro(){
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, (0x68 << 1), 0x3B, 1, data, 14, HAL_MAX_DELAY);
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	9302      	str	r3, [sp, #8]
 800057c:	230e      	movs	r3, #14
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	4b2d      	ldr	r3, [pc, #180]	@ (8000638 <Read_accel_temp_gyro+0xc8>)
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2301      	movs	r3, #1
 8000586:	223b      	movs	r2, #59	@ 0x3b
 8000588:	21d0      	movs	r1, #208	@ 0xd0
 800058a:	482c      	ldr	r0, [pc, #176]	@ (800063c <Read_accel_temp_gyro+0xcc>)
 800058c:	f001 f8c8 	bl	8001720 <HAL_I2C_Mem_Read>
	// 2 byte
	accel_x = (data[0] << 8) | data[1];
 8000590:	4b29      	ldr	r3, [pc, #164]	@ (8000638 <Read_accel_temp_gyro+0xc8>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	021b      	lsls	r3, r3, #8
 8000596:	b21a      	sxth	r2, r3
 8000598:	4b27      	ldr	r3, [pc, #156]	@ (8000638 <Read_accel_temp_gyro+0xc8>)
 800059a:	785b      	ldrb	r3, [r3, #1]
 800059c:	b21b      	sxth	r3, r3
 800059e:	4313      	orrs	r3, r2
 80005a0:	b21a      	sxth	r2, r3
 80005a2:	4b27      	ldr	r3, [pc, #156]	@ (8000640 <Read_accel_temp_gyro+0xd0>)
 80005a4:	801a      	strh	r2, [r3, #0]
	accel_y = (data[2] << 8) | data[3];
 80005a6:	4b24      	ldr	r3, [pc, #144]	@ (8000638 <Read_accel_temp_gyro+0xc8>)
 80005a8:	789b      	ldrb	r3, [r3, #2]
 80005aa:	021b      	lsls	r3, r3, #8
 80005ac:	b21a      	sxth	r2, r3
 80005ae:	4b22      	ldr	r3, [pc, #136]	@ (8000638 <Read_accel_temp_gyro+0xc8>)
 80005b0:	78db      	ldrb	r3, [r3, #3]
 80005b2:	b21b      	sxth	r3, r3
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b21a      	sxth	r2, r3
 80005b8:	4b22      	ldr	r3, [pc, #136]	@ (8000644 <Read_accel_temp_gyro+0xd4>)
 80005ba:	801a      	strh	r2, [r3, #0]
	accel_z = (data[4] << 8) | data[5];
 80005bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000638 <Read_accel_temp_gyro+0xc8>)
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	021b      	lsls	r3, r3, #8
 80005c2:	b21a      	sxth	r2, r3
 80005c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <Read_accel_temp_gyro+0xc8>)
 80005c6:	795b      	ldrb	r3, [r3, #5]
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b21a      	sxth	r2, r3
 80005ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <Read_accel_temp_gyro+0xd8>)
 80005d0:	801a      	strh	r2, [r3, #0]
	temp = (data[6] << 8) | data[7];
 80005d2:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <Read_accel_temp_gyro+0xc8>)
 80005d4:	799b      	ldrb	r3, [r3, #6]
 80005d6:	021b      	lsls	r3, r3, #8
 80005d8:	b21a      	sxth	r2, r3
 80005da:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <Read_accel_temp_gyro+0xc8>)
 80005dc:	79db      	ldrb	r3, [r3, #7]
 80005de:	b21b      	sxth	r3, r3
 80005e0:	4313      	orrs	r3, r2
 80005e2:	b21a      	sxth	r2, r3
 80005e4:	4b19      	ldr	r3, [pc, #100]	@ (800064c <Read_accel_temp_gyro+0xdc>)
 80005e6:	801a      	strh	r2, [r3, #0]
	gyro_x = (data[8] << 8) | data[9];
 80005e8:	4b13      	ldr	r3, [pc, #76]	@ (8000638 <Read_accel_temp_gyro+0xc8>)
 80005ea:	7a1b      	ldrb	r3, [r3, #8]
 80005ec:	021b      	lsls	r3, r3, #8
 80005ee:	b21a      	sxth	r2, r3
 80005f0:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <Read_accel_temp_gyro+0xc8>)
 80005f2:	7a5b      	ldrb	r3, [r3, #9]
 80005f4:	b21b      	sxth	r3, r3
 80005f6:	4313      	orrs	r3, r2
 80005f8:	b21a      	sxth	r2, r3
 80005fa:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <Read_accel_temp_gyro+0xe0>)
 80005fc:	801a      	strh	r2, [r3, #0]
	gyro_y = (data[10] << 8) | data[11];
 80005fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <Read_accel_temp_gyro+0xc8>)
 8000600:	7a9b      	ldrb	r3, [r3, #10]
 8000602:	021b      	lsls	r3, r3, #8
 8000604:	b21a      	sxth	r2, r3
 8000606:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <Read_accel_temp_gyro+0xc8>)
 8000608:	7adb      	ldrb	r3, [r3, #11]
 800060a:	b21b      	sxth	r3, r3
 800060c:	4313      	orrs	r3, r2
 800060e:	b21a      	sxth	r2, r3
 8000610:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <Read_accel_temp_gyro+0xe4>)
 8000612:	801a      	strh	r2, [r3, #0]
	gyro_z = (data[12] << 8) | data[13];
 8000614:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <Read_accel_temp_gyro+0xc8>)
 8000616:	7b1b      	ldrb	r3, [r3, #12]
 8000618:	021b      	lsls	r3, r3, #8
 800061a:	b21a      	sxth	r2, r3
 800061c:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <Read_accel_temp_gyro+0xc8>)
 800061e:	7b5b      	ldrb	r3, [r3, #13]
 8000620:	b21b      	sxth	r3, r3
 8000622:	4313      	orrs	r3, r2
 8000624:	b21a      	sxth	r2, r3
 8000626:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <Read_accel_temp_gyro+0xe8>)
 8000628:	801a      	strh	r2, [r3, #0]
	HAL_Delay(10);
 800062a:	200a      	movs	r0, #10
 800062c:	f000 fbe8 	bl	8000e00 <HAL_Delay>
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000114 	.word	0x20000114
 800063c:	20000078 	.word	0x20000078
 8000640:	20000122 	.word	0x20000122
 8000644:	20000124 	.word	0x20000124
 8000648:	20000126 	.word	0x20000126
 800064c:	2000012e 	.word	0x2000012e
 8000650:	20000128 	.word	0x20000128
 8000654:	2000012a 	.word	0x2000012a
 8000658:	2000012c 	.word	0x2000012c

0800065c <Read_mag>:

void Read_mag(){
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, (0x0C << 1), 0x03, 1, data, 6, HAL_MAX_DELAY);
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	9302      	str	r3, [sp, #8]
 8000668:	2306      	movs	r3, #6
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <Read_mag+0x70>)
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2301      	movs	r3, #1
 8000672:	2203      	movs	r2, #3
 8000674:	2118      	movs	r1, #24
 8000676:	4816      	ldr	r0, [pc, #88]	@ (80006d0 <Read_mag+0x74>)
 8000678:	f001 f852 	bl	8001720 <HAL_I2C_Mem_Read>
	// 2 byte
    mag_x = (data[1] << 8) | data[0];
 800067c:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <Read_mag+0x70>)
 800067e:	785b      	ldrb	r3, [r3, #1]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	b21a      	sxth	r2, r3
 8000684:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <Read_mag+0x70>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b21b      	sxth	r3, r3
 800068a:	4313      	orrs	r3, r2
 800068c:	b21a      	sxth	r2, r3
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <Read_mag+0x78>)
 8000690:	801a      	strh	r2, [r3, #0]
    mag_y = (data[3] << 8) | data[2];
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <Read_mag+0x70>)
 8000694:	78db      	ldrb	r3, [r3, #3]
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	b21a      	sxth	r2, r3
 800069a:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <Read_mag+0x70>)
 800069c:	789b      	ldrb	r3, [r3, #2]
 800069e:	b21b      	sxth	r3, r3
 80006a0:	4313      	orrs	r3, r2
 80006a2:	b21a      	sxth	r2, r3
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <Read_mag+0x7c>)
 80006a6:	801a      	strh	r2, [r3, #0]
    mag_z = (data[5] << 8) | data[4];
 80006a8:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <Read_mag+0x70>)
 80006aa:	795b      	ldrb	r3, [r3, #5]
 80006ac:	021b      	lsls	r3, r3, #8
 80006ae:	b21a      	sxth	r2, r3
 80006b0:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <Read_mag+0x70>)
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	b21b      	sxth	r3, r3
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b21a      	sxth	r2, r3
 80006ba:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <Read_mag+0x80>)
 80006bc:	801a      	strh	r2, [r3, #0]
    HAL_Delay(10);
 80006be:	200a      	movs	r0, #10
 80006c0:	f000 fb9e 	bl	8000e00 <HAL_Delay>
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000114 	.word	0x20000114
 80006d0:	20000078 	.word	0x20000078
 80006d4:	20000130 	.word	0x20000130
 80006d8:	20000132 	.word	0x20000132
 80006dc:	20000134 	.word	0x20000134

080006e0 <Read_baro>:
void Read_baro(){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, (0x77 << 1), 0xF7, 1, data, 6, HAL_MAX_DELAY);
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	9302      	str	r3, [sp, #8]
 80006ec:	2306      	movs	r3, #6
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <Read_baro+0x64>)
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2301      	movs	r3, #1
 80006f6:	22f7      	movs	r2, #247	@ 0xf7
 80006f8:	21ee      	movs	r1, #238	@ 0xee
 80006fa:	4813      	ldr	r0, [pc, #76]	@ (8000748 <Read_baro+0x68>)
 80006fc:	f001 f810 	bl	8001720 <HAL_I2C_Mem_Read>
	// 3 byte
	baro_pressure = (data[0] << 12) | (data[1] << 4) | (data[2] >> 4);
 8000700:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <Read_baro+0x64>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	031a      	lsls	r2, r3, #12
 8000706:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <Read_baro+0x64>)
 8000708:	785b      	ldrb	r3, [r3, #1]
 800070a:	011b      	lsls	r3, r3, #4
 800070c:	4313      	orrs	r3, r2
 800070e:	4a0d      	ldr	r2, [pc, #52]	@ (8000744 <Read_baro+0x64>)
 8000710:	7892      	ldrb	r2, [r2, #2]
 8000712:	0912      	lsrs	r2, r2, #4
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	4313      	orrs	r3, r2
 8000718:	4a0c      	ldr	r2, [pc, #48]	@ (800074c <Read_baro+0x6c>)
 800071a:	6013      	str	r3, [r2, #0]
	baro_temp = (data[3] << 12) | (data[4] << 4) | (data[5] >> 4);
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <Read_baro+0x64>)
 800071e:	78db      	ldrb	r3, [r3, #3]
 8000720:	031a      	lsls	r2, r3, #12
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <Read_baro+0x64>)
 8000724:	791b      	ldrb	r3, [r3, #4]
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	4313      	orrs	r3, r2
 800072a:	4a06      	ldr	r2, [pc, #24]	@ (8000744 <Read_baro+0x64>)
 800072c:	7952      	ldrb	r2, [r2, #5]
 800072e:	0912      	lsrs	r2, r2, #4
 8000730:	b2d2      	uxtb	r2, r2
 8000732:	4313      	orrs	r3, r2
 8000734:	4a06      	ldr	r2, [pc, #24]	@ (8000750 <Read_baro+0x70>)
 8000736:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8000738:	200a      	movs	r0, #10
 800073a:	f000 fb61 	bl	8000e00 <HAL_Delay>
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000114 	.word	0x20000114
 8000748:	20000078 	.word	0x20000078
 800074c:	2000013c 	.word	0x2000013c
 8000750:	20000138 	.word	0x20000138

08000754 <uart_output>:

void uart_output(){
 8000754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000756:	b0d5      	sub	sp, #340	@ 0x154
 8000758:	af0c      	add	r7, sp, #48	@ 0x30
	uint8_t buffer[256];
	uint16_t strlen = snprintf(buffer, sizeof(buffer),
 800075a:	4b2c      	ldr	r3, [pc, #176]	@ (800080c <uart_output+0xb8>)
 800075c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000760:	469c      	mov	ip, r3
 8000762:	4b2b      	ldr	r3, [pc, #172]	@ (8000810 <uart_output+0xbc>)
 8000764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000768:	4619      	mov	r1, r3
 800076a:	4b2a      	ldr	r3, [pc, #168]	@ (8000814 <uart_output+0xc0>)
 800076c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000770:	461c      	mov	r4, r3
 8000772:	4b29      	ldr	r3, [pc, #164]	@ (8000818 <uart_output+0xc4>)
 8000774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000778:	461d      	mov	r5, r3
 800077a:	4b28      	ldr	r3, [pc, #160]	@ (800081c <uart_output+0xc8>)
 800077c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000780:	461e      	mov	r6, r3
 8000782:	4b27      	ldr	r3, [pc, #156]	@ (8000820 <uart_output+0xcc>)
 8000784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	4b26      	ldr	r3, [pc, #152]	@ (8000824 <uart_output+0xd0>)
 800078c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <uart_output+0xd4>)
 8000794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b24      	ldr	r3, [pc, #144]	@ (800082c <uart_output+0xd8>)
 800079c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b23      	ldr	r3, [pc, #140]	@ (8000830 <uart_output+0xdc>)
 80007a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <uart_output+0xe0>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a22      	ldr	r2, [pc, #136]	@ (8000838 <uart_output+0xe4>)
 80007b0:	6812      	ldr	r2, [r2, #0]
 80007b2:	f107 001c 	add.w	r0, r7, #28
 80007b6:	920a      	str	r2, [sp, #40]	@ 0x28
 80007b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	9208      	str	r2, [sp, #32]
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	9207      	str	r2, [sp, #28]
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	9206      	str	r2, [sp, #24]
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	9205      	str	r2, [sp, #20]
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	9304      	str	r3, [sp, #16]
 80007ce:	9603      	str	r6, [sp, #12]
 80007d0:	9502      	str	r5, [sp, #8]
 80007d2:	9401      	str	r4, [sp, #4]
 80007d4:	9100      	str	r1, [sp, #0]
 80007d6:	4663      	mov	r3, ip
 80007d8:	4a18      	ldr	r2, [pc, #96]	@ (800083c <uart_output+0xe8>)
 80007da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007de:	f003 f901 	bl	80039e4 <sniprintf>
 80007e2:	4603      	mov	r3, r0
 80007e4:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
            accel_x, accel_y, accel_z,
            gyro_x, gyro_y, gyro_z,
            temp,
            mag_x, mag_y, mag_z,
            baro_temp, baro_pressure);
	HAL_UART_Transmit(&huart2, buffer, strlen, HAL_MAX_DELAY);
 80007e8:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 80007ec:	f107 011c 	add.w	r1, r7, #28
 80007f0:	f04f 33ff 	mov.w	r3, #4294967295
 80007f4:	4812      	ldr	r0, [pc, #72]	@ (8000840 <uart_output+0xec>)
 80007f6:	f002 f943 	bl	8002a80 <HAL_UART_Transmit>
	HAL_Delay(20);
 80007fa:	2014      	movs	r0, #20
 80007fc:	f000 fb00 	bl	8000e00 <HAL_Delay>

}
 8000800:	bf00      	nop
 8000802:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8000806:	46bd      	mov	sp, r7
 8000808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800080a:	bf00      	nop
 800080c:	20000122 	.word	0x20000122
 8000810:	20000124 	.word	0x20000124
 8000814:	20000126 	.word	0x20000126
 8000818:	20000128 	.word	0x20000128
 800081c:	2000012a 	.word	0x2000012a
 8000820:	2000012c 	.word	0x2000012c
 8000824:	2000012e 	.word	0x2000012e
 8000828:	20000130 	.word	0x20000130
 800082c:	20000132 	.word	0x20000132
 8000830:	20000134 	.word	0x20000134
 8000834:	20000138 	.word	0x20000138
 8000838:	2000013c 	.word	0x2000013c
 800083c:	08004364 	.word	0x08004364
 8000840:	200000cc 	.word	0x200000cc

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000848:	f000 fa68 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084c:	f000 f814 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000850:	f000 f8ca 	bl	80009e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000854:	f000 f89e 	bl	8000994 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000858:	f000 f86e 	bl	8000938 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Read_accel_temp_gyro();
 800085c:	f7ff fe88 	bl	8000570 <Read_accel_temp_gyro>
	  Read_baro();
 8000860:	f7ff ff3e 	bl	80006e0 <Read_baro>
	  Read_mag();
 8000864:	f7ff fefa 	bl	800065c <Read_mag>
	  uart_output();
 8000868:	f7ff ff74 	bl	8000754 <uart_output>
	  HAL_Delay(40);
 800086c:	2028      	movs	r0, #40	@ 0x28
 800086e:	f000 fac7 	bl	8000e00 <HAL_Delay>
	  Read_accel_temp_gyro();
 8000872:	bf00      	nop
 8000874:	e7f2      	b.n	800085c <main+0x18>
	...

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b094      	sub	sp, #80	@ 0x50
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	2230      	movs	r2, #48	@ 0x30
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f003 f8e0 	bl	8003a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	4b23      	ldr	r3, [pc, #140]	@ (8000930 <SystemClock_Config+0xb8>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a4:	4a22      	ldr	r2, [pc, #136]	@ (8000930 <SystemClock_Config+0xb8>)
 80008a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ac:	4b20      	ldr	r3, [pc, #128]	@ (8000930 <SystemClock_Config+0xb8>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000934 <SystemClock_Config+0xbc>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000934 <SystemClock_Config+0xbc>)
 80008c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008ca:	6013      	str	r3, [r2, #0]
 80008cc:	4b19      	ldr	r3, [pc, #100]	@ (8000934 <SystemClock_Config+0xbc>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008dc:	2301      	movs	r3, #1
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e0:	2310      	movs	r3, #16
 80008e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 fc1f 	bl	8002130 <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008f8:	f000 f89e 	bl	8000a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	230f      	movs	r3, #15
 80008fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f001 fe82 	bl	8002620 <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000922:	f000 f889 	bl	8000a38 <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3750      	adds	r7, #80	@ 0x50
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40007000 	.word	0x40007000

08000938 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800093c:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <MX_I2C1_Init+0x50>)
 800093e:	4a13      	ldr	r2, [pc, #76]	@ (800098c <MX_I2C1_Init+0x54>)
 8000940:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000942:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <MX_I2C1_Init+0x50>)
 8000944:	4a12      	ldr	r2, [pc, #72]	@ (8000990 <MX_I2C1_Init+0x58>)
 8000946:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000948:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000954:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <MX_I2C1_Init+0x50>)
 8000956:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800095a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800095c:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <MX_I2C1_Init+0x50>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <MX_I2C1_Init+0x50>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000968:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <MX_I2C1_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <MX_I2C1_Init+0x50>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	@ (8000988 <MX_I2C1_Init+0x50>)
 8000976:	f000 fd8f 	bl	8001498 <HAL_I2C_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000980:	f000 f85a 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000078 	.word	0x20000078
 800098c:	40005400 	.word	0x40005400
 8000990:	000186a0 	.word	0x000186a0

08000994 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000998:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 800099a:	4a12      	ldr	r2, [pc, #72]	@ (80009e4 <MX_USART2_UART_Init+0x50>)
 800099c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009cc:	f002 f808 	bl	80029e0 <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009d6:	f000 f82f 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000cc 	.word	0x200000cc
 80009e4:	40004400 	.word	0x40004400

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <MX_GPIO_Init+0x4c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a34 <MX_GPIO_Init+0x4c>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <MX_GPIO_Init+0x4c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_GPIO_Init+0x4c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <MX_GPIO_Init+0x4c>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_GPIO_Init+0x4c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <Error_Handler+0x8>

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b10      	ldr	r3, [pc, #64]	@ (8000a90 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	4a0f      	ldr	r2, [pc, #60]	@ (8000a90 <HAL_MspInit+0x4c>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	4a08      	ldr	r2, [pc, #32]	@ (8000a90 <HAL_MspInit+0x4c>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	@ 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	@ (8000b18 <HAL_I2C_MspInit+0x84>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d12b      	bne.n	8000b0e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b18      	ldr	r3, [pc, #96]	@ (8000b1c <HAL_I2C_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a17      	ldr	r2, [pc, #92]	@ (8000b1c <HAL_I2C_MspInit+0x88>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <HAL_I2C_MspInit+0x88>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ad2:	23c0      	movs	r3, #192	@ 0xc0
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad6:	2312      	movs	r3, #18
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <HAL_I2C_MspInit+0x8c>)
 8000aee:	f000 fb4f 	bl	8001190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <HAL_I2C_MspInit+0x88>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <HAL_I2C_MspInit+0x88>)
 8000afc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_I2C_MspInit+0x88>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	@ 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40005400 	.word	0x40005400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020400 	.word	0x40020400

08000b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	@ 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a1d      	ldr	r2, [pc, #116]	@ (8000bb8 <HAL_UART_MspInit+0x94>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d133      	bne.n	8000bae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bbc <HAL_UART_MspInit+0x98>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8000bbc <HAL_UART_MspInit+0x98>)
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b56:	4b19      	ldr	r3, [pc, #100]	@ (8000bbc <HAL_UART_MspInit+0x98>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <HAL_UART_MspInit+0x98>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	4a14      	ldr	r2, [pc, #80]	@ (8000bbc <HAL_UART_MspInit+0x98>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b72:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <HAL_UART_MspInit+0x98>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b7e:	230c      	movs	r3, #12
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4809      	ldr	r0, [pc, #36]	@ (8000bc0 <HAL_UART_MspInit+0x9c>)
 8000b9a:	f000 faf9 	bl	8001190 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2026      	movs	r0, #38	@ 0x26
 8000ba4:	f000 fa2b 	bl	8000ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ba8:	2026      	movs	r0, #38	@ 0x26
 8000baa:	f000 fa44 	bl	8001036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	@ 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020000 	.word	0x40020000

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <NMI_Handler+0x4>

08000bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1a:	f000 f8d1 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c28:	4802      	ldr	r0, [pc, #8]	@ (8000c34 <USART2_IRQHandler+0x10>)
 8000c2a:	f001 ffb5 	bl	8002b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200000cc 	.word	0x200000cc

08000c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c40:	4a14      	ldr	r2, [pc, #80]	@ (8000c94 <_sbrk+0x5c>)
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <_sbrk+0x60>)
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <_sbrk+0x64>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	@ (8000ca0 <_sbrk+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d207      	bcs.n	8000c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c68:	f002 fef8 	bl	8003a5c <__errno>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	220c      	movs	r2, #12
 8000c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e009      	b.n	8000c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a05      	ldr	r2, [pc, #20]	@ (8000c9c <_sbrk+0x64>)
 8000c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20018000 	.word	0x20018000
 8000c98:	00000400 	.word	0x00000400
 8000c9c:	20000140 	.word	0x20000140
 8000ca0:	20000290 	.word	0x20000290

08000ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <SystemInit+0x20>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cae:	4a05      	ldr	r2, [pc, #20]	@ (8000cc4 <SystemInit+0x20>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ccc:	f7ff ffea 	bl	8000ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd0:	480c      	ldr	r0, [pc, #48]	@ (8000d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cd2:	490d      	ldr	r1, [pc, #52]	@ (8000d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f002 feb7 	bl	8003a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfa:	f7ff fda3 	bl	8000844 <main>
  bx  lr    
 8000cfe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d0c:	08004434 	.word	0x08004434
  ldr r2, =_sbss
 8000d10:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d14:	20000290 	.word	0x20000290

08000d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d20:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0d      	ldr	r2, [pc, #52]	@ (8000d5c <HAL_Init+0x40>)
 8000d26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0a      	ldr	r2, [pc, #40]	@ (8000d5c <HAL_Init+0x40>)
 8000d32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	@ (8000d5c <HAL_Init+0x40>)
 8000d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f94f 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f000 f808 	bl	8000d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff fe78 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023c00 	.word	0x40023c00

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <HAL_InitTick+0x54>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <HAL_InitTick+0x58>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f967 	bl	8001052 <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00e      	b.n	8000dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d80a      	bhi.n	8000daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d94:	2200      	movs	r2, #0
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f000 f92f 	bl	8000ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da0:	4a06      	ldr	r2, [pc, #24]	@ (8000dbc <HAL_InitTick+0x5c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000144 	.word	0x20000144

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	@ (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000144 	.word	0x20000144

08000e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e08:	f7ff ffee 	bl	8000de8 <HAL_GetTick>
 8000e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e18:	d005      	beq.n	8000e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <HAL_Delay+0x44>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4413      	add	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e26:	bf00      	nop
 8000e28:	f7ff ffde 	bl	8000de8 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d8f7      	bhi.n	8000e28 <HAL_Delay+0x28>
  {
  }
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db0b      	blt.n	8000ed6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 021f 	and.w	r2, r3, #31
 8000ec4:	4907      	ldr	r1, [pc, #28]	@ (8000ee4 <__NVIC_EnableIRQ+0x38>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	2001      	movs	r0, #1
 8000ece:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	@ (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	@ (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	@ 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	@ 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fb4:	d301      	bcc.n	8000fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00f      	b.n	8000fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fba:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <SysTick_Config+0x40>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f7ff ff8e 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <SysTick_Config+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <SysTick_Config+0x40>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff29 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001010:	f7ff ff3e 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8001014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff ff8e 	bl	8000f3c <NVIC_EncodePriority>
 8001020:	4602      	mov	r2, r0
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff5d 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff31 	bl	8000eac <__NVIC_EnableIRQ>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffa2 	bl	8000fa4 <SysTick_Config>
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b084      	sub	sp, #16
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001076:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff feb6 	bl	8000de8 <HAL_GetTick>
 800107c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d008      	beq.n	800109c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2280      	movs	r2, #128	@ 0x80
 800108e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e052      	b.n	8001142 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0216 	bic.w	r2, r2, #22
 80010aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	695a      	ldr	r2, [r3, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d103      	bne.n	80010cc <HAL_DMA_Abort+0x62>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d007      	beq.n	80010dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0208 	bic.w	r2, r2, #8
 80010da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0201 	bic.w	r2, r2, #1
 80010ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ec:	e013      	b.n	8001116 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ee:	f7ff fe7b 	bl	8000de8 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b05      	cmp	r3, #5
 80010fa:	d90c      	bls.n	8001116 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2220      	movs	r2, #32
 8001100:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2203      	movs	r2, #3
 8001106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e015      	b.n	8001142 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e4      	bne.n	80010ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001128:	223f      	movs	r2, #63	@ 0x3f
 800112a:	409a      	lsls	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d004      	beq.n	8001168 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2280      	movs	r2, #128	@ 0x80
 8001162:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e00c      	b.n	8001182 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2205      	movs	r2, #5
 800116c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0201 	bic.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	@ 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e159      	b.n	8001460 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 8148 	bne.w	800145a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d005      	beq.n	80011e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d130      	bne.n	8001244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 0201 	and.w	r2, r3, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b03      	cmp	r3, #3
 800124e:	d017      	beq.n	8001280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d123      	bne.n	80012d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	69b9      	ldr	r1, [r7, #24]
 80012d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80a2 	beq.w	800145a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b57      	ldr	r3, [pc, #348]	@ (8001478 <HAL_GPIO_Init+0x2e8>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	4a56      	ldr	r2, [pc, #344]	@ (8001478 <HAL_GPIO_Init+0x2e8>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001324:	6453      	str	r3, [r2, #68]	@ 0x44
 8001326:	4b54      	ldr	r3, [pc, #336]	@ (8001478 <HAL_GPIO_Init+0x2e8>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001332:	4a52      	ldr	r2, [pc, #328]	@ (800147c <HAL_GPIO_Init+0x2ec>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a49      	ldr	r2, [pc, #292]	@ (8001480 <HAL_GPIO_Init+0x2f0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_GPIO_Init+0x202>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a48      	ldr	r2, [pc, #288]	@ (8001484 <HAL_GPIO_Init+0x2f4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x1fe>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a47      	ldr	r2, [pc, #284]	@ (8001488 <HAL_GPIO_Init+0x2f8>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x1fa>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a46      	ldr	r2, [pc, #280]	@ (800148c <HAL_GPIO_Init+0x2fc>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x1f6>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a45      	ldr	r2, [pc, #276]	@ (8001490 <HAL_GPIO_Init+0x300>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x1f2>
 800137e:	2304      	movs	r3, #4
 8001380:	e008      	b.n	8001394 <HAL_GPIO_Init+0x204>
 8001382:	2307      	movs	r3, #7
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x204>
 8001386:	2303      	movs	r3, #3
 8001388:	e004      	b.n	8001394 <HAL_GPIO_Init+0x204>
 800138a:	2302      	movs	r3, #2
 800138c:	e002      	b.n	8001394 <HAL_GPIO_Init+0x204>
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <HAL_GPIO_Init+0x204>
 8001392:	2300      	movs	r3, #0
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	f002 0203 	and.w	r2, r2, #3
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	4093      	lsls	r3, r2
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a4:	4935      	ldr	r1, [pc, #212]	@ (800147c <HAL_GPIO_Init+0x2ec>)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b2:	4b38      	ldr	r3, [pc, #224]	@ (8001494 <HAL_GPIO_Init+0x304>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001494 <HAL_GPIO_Init+0x304>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001494 <HAL_GPIO_Init+0x304>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001400:	4a24      	ldr	r2, [pc, #144]	@ (8001494 <HAL_GPIO_Init+0x304>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001406:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <HAL_GPIO_Init+0x304>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142a:	4a1a      	ldr	r2, [pc, #104]	@ (8001494 <HAL_GPIO_Init+0x304>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001430:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <HAL_GPIO_Init+0x304>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001454:	4a0f      	ldr	r2, [pc, #60]	@ (8001494 <HAL_GPIO_Init+0x304>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3301      	adds	r3, #1
 800145e:	61fb      	str	r3, [r7, #28]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	2b0f      	cmp	r3, #15
 8001464:	f67f aea2 	bls.w	80011ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800
 800147c:	40013800 	.word	0x40013800
 8001480:	40020000 	.word	0x40020000
 8001484:	40020400 	.word	0x40020400
 8001488:	40020800 	.word	0x40020800
 800148c:	40020c00 	.word	0x40020c00
 8001490:	40021000 	.word	0x40021000
 8001494:	40013c00 	.word	0x40013c00

08001498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e12b      	b.n	8001702 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d106      	bne.n	80014c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fae8 	bl	8000a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2224      	movs	r2, #36	@ 0x24
 80014c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0201 	bic.w	r2, r2, #1
 80014da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014fc:	f001 fa48 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 8001500:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4a81      	ldr	r2, [pc, #516]	@ (800170c <HAL_I2C_Init+0x274>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d807      	bhi.n	800151c <HAL_I2C_Init+0x84>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4a80      	ldr	r2, [pc, #512]	@ (8001710 <HAL_I2C_Init+0x278>)
 8001510:	4293      	cmp	r3, r2
 8001512:	bf94      	ite	ls
 8001514:	2301      	movls	r3, #1
 8001516:	2300      	movhi	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	e006      	b.n	800152a <HAL_I2C_Init+0x92>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4a7d      	ldr	r2, [pc, #500]	@ (8001714 <HAL_I2C_Init+0x27c>)
 8001520:	4293      	cmp	r3, r2
 8001522:	bf94      	ite	ls
 8001524:	2301      	movls	r3, #1
 8001526:	2300      	movhi	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0e7      	b.n	8001702 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4a78      	ldr	r2, [pc, #480]	@ (8001718 <HAL_I2C_Init+0x280>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	0c9b      	lsrs	r3, r3, #18
 800153c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	430a      	orrs	r2, r1
 8001550:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	4a6a      	ldr	r2, [pc, #424]	@ (800170c <HAL_I2C_Init+0x274>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d802      	bhi.n	800156c <HAL_I2C_Init+0xd4>
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3301      	adds	r3, #1
 800156a:	e009      	b.n	8001580 <HAL_I2C_Init+0xe8>
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	4a69      	ldr	r2, [pc, #420]	@ (800171c <HAL_I2C_Init+0x284>)
 8001578:	fba2 2303 	umull	r2, r3, r2, r3
 800157c:	099b      	lsrs	r3, r3, #6
 800157e:	3301      	adds	r3, #1
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	430b      	orrs	r3, r1
 8001586:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001592:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	495c      	ldr	r1, [pc, #368]	@ (800170c <HAL_I2C_Init+0x274>)
 800159c:	428b      	cmp	r3, r1
 800159e:	d819      	bhi.n	80015d4 <HAL_I2C_Init+0x13c>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1e59      	subs	r1, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ae:	1c59      	adds	r1, r3, #1
 80015b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015b4:	400b      	ands	r3, r1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00a      	beq.n	80015d0 <HAL_I2C_Init+0x138>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	1e59      	subs	r1, r3, #1
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80015c8:	3301      	adds	r3, #1
 80015ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ce:	e051      	b.n	8001674 <HAL_I2C_Init+0x1dc>
 80015d0:	2304      	movs	r3, #4
 80015d2:	e04f      	b.n	8001674 <HAL_I2C_Init+0x1dc>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d111      	bne.n	8001600 <HAL_I2C_Init+0x168>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	1e58      	subs	r0, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6859      	ldr	r1, [r3, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	440b      	add	r3, r1
 80015ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ee:	3301      	adds	r3, #1
 80015f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	bf0c      	ite	eq
 80015f8:	2301      	moveq	r3, #1
 80015fa:	2300      	movne	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	e012      	b.n	8001626 <HAL_I2C_Init+0x18e>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1e58      	subs	r0, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6859      	ldr	r1, [r3, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	0099      	lsls	r1, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	fbb0 f3f3 	udiv	r3, r0, r3
 8001616:	3301      	adds	r3, #1
 8001618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800161c:	2b00      	cmp	r3, #0
 800161e:	bf0c      	ite	eq
 8001620:	2301      	moveq	r3, #1
 8001622:	2300      	movne	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_I2C_Init+0x196>
 800162a:	2301      	movs	r3, #1
 800162c:	e022      	b.n	8001674 <HAL_I2C_Init+0x1dc>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10e      	bne.n	8001654 <HAL_I2C_Init+0x1bc>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1e58      	subs	r0, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6859      	ldr	r1, [r3, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	440b      	add	r3, r1
 8001644:	fbb0 f3f3 	udiv	r3, r0, r3
 8001648:	3301      	adds	r3, #1
 800164a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001652:	e00f      	b.n	8001674 <HAL_I2C_Init+0x1dc>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1e58      	subs	r0, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6859      	ldr	r1, [r3, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	0099      	lsls	r1, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	fbb0 f3f3 	udiv	r3, r0, r3
 800166a:	3301      	adds	r3, #1
 800166c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001670:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	6809      	ldr	r1, [r1, #0]
 8001678:	4313      	orrs	r3, r2
 800167a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69da      	ldr	r2, [r3, #28]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6911      	ldr	r1, [r2, #16]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68d2      	ldr	r2, [r2, #12]
 80016ae:	4311      	orrs	r1, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	430b      	orrs	r3, r1
 80016b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0201 	orr.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2220      	movs	r2, #32
 80016ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	000186a0 	.word	0x000186a0
 8001710:	001e847f 	.word	0x001e847f
 8001714:	003d08ff 	.word	0x003d08ff
 8001718:	431bde83 	.word	0x431bde83
 800171c:	10624dd3 	.word	0x10624dd3

08001720 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08c      	sub	sp, #48	@ 0x30
 8001724:	af02      	add	r7, sp, #8
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	4608      	mov	r0, r1
 800172a:	4611      	mov	r1, r2
 800172c:	461a      	mov	r2, r3
 800172e:	4603      	mov	r3, r0
 8001730:	817b      	strh	r3, [r7, #10]
 8001732:	460b      	mov	r3, r1
 8001734:	813b      	strh	r3, [r7, #8]
 8001736:	4613      	mov	r3, r2
 8001738:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800173a:	f7ff fb55 	bl	8000de8 <HAL_GetTick>
 800173e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b20      	cmp	r3, #32
 800174a:	f040 8214 	bne.w	8001b76 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2319      	movs	r3, #25
 8001754:	2201      	movs	r2, #1
 8001756:	497b      	ldr	r1, [pc, #492]	@ (8001944 <HAL_I2C_Mem_Read+0x224>)
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f000 fafb 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001764:	2302      	movs	r3, #2
 8001766:	e207      	b.n	8001b78 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800176e:	2b01      	cmp	r3, #1
 8001770:	d101      	bne.n	8001776 <HAL_I2C_Mem_Read+0x56>
 8001772:	2302      	movs	r3, #2
 8001774:	e200      	b.n	8001b78 <HAL_I2C_Mem_Read+0x458>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b01      	cmp	r3, #1
 800178a:	d007      	beq.n	800179c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0201 	orr.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2222      	movs	r2, #34	@ 0x22
 80017b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2240      	movs	r2, #64	@ 0x40
 80017b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80017cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4a5b      	ldr	r2, [pc, #364]	@ (8001948 <HAL_I2C_Mem_Read+0x228>)
 80017dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017de:	88f8      	ldrh	r0, [r7, #6]
 80017e0:	893a      	ldrh	r2, [r7, #8]
 80017e2:	8979      	ldrh	r1, [r7, #10]
 80017e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	4603      	mov	r3, r0
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 f9c8 	bl	8001b84 <I2C_RequestMemoryRead>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e1bc      	b.n	8001b78 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001802:	2b00      	cmp	r3, #0
 8001804:	d113      	bne.n	800182e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	623b      	str	r3, [r7, #32]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	623b      	str	r3, [r7, #32]
 800181a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	e190      	b.n	8001b50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001832:	2b01      	cmp	r3, #1
 8001834:	d11b      	bne.n	800186e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001844:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e170      	b.n	8001b50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001872:	2b02      	cmp	r3, #2
 8001874:	d11b      	bne.n	80018ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001884:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001894:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	61bb      	str	r3, [r7, #24]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	e150      	b.n	8001b50 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80018c4:	e144      	b.n	8001b50 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	f200 80f1 	bhi.w	8001ab2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d123      	bne.n	8001920 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 fb9b 	bl	8002018 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e145      	b.n	8001b78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001908:	3b01      	subs	r3, #1
 800190a:	b29a      	uxth	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001914:	b29b      	uxth	r3, r3
 8001916:	3b01      	subs	r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800191e:	e117      	b.n	8001b50 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001924:	2b02      	cmp	r3, #2
 8001926:	d14e      	bne.n	80019c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800192e:	2200      	movs	r2, #0
 8001930:	4906      	ldr	r1, [pc, #24]	@ (800194c <HAL_I2C_Mem_Read+0x22c>)
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 fa0e 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d008      	beq.n	8001950 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e11a      	b.n	8001b78 <HAL_I2C_Mem_Read+0x458>
 8001942:	bf00      	nop
 8001944:	00100002 	.word	0x00100002
 8001948:	ffff0000 	.word	0xffff0000
 800194c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800195e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	691a      	ldr	r2, [r3, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800197c:	3b01      	subs	r3, #1
 800197e:	b29a      	uxth	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001988:	b29b      	uxth	r3, r3
 800198a:	3b01      	subs	r3, #1
 800198c:	b29a      	uxth	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ae:	3b01      	subs	r3, #1
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	3b01      	subs	r3, #1
 80019be:	b29a      	uxth	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80019c4:	e0c4      	b.n	8001b50 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019cc:	2200      	movs	r2, #0
 80019ce:	496c      	ldr	r1, [pc, #432]	@ (8001b80 <HAL_I2C_Mem_Read+0x460>)
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f000 f9bf 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0cb      	b.n	8001b78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4955      	ldr	r1, [pc, #340]	@ (8001b80 <HAL_I2C_Mem_Read+0x460>)
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 f991 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e09d      	b.n	8001b78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	691a      	ldr	r2, [r3, #16]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ab0:	e04e      	b.n	8001b50 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 faae 	bl	8002018 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e058      	b.n	8001b78 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d124      	bne.n	8001b50 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d107      	bne.n	8001b1e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b1c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f47f aeb6 	bne.w	80018c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e000      	b.n	8001b78 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001b76:	2302      	movs	r3, #2
  }
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3728      	adds	r7, #40	@ 0x28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	00010004 	.word	0x00010004

08001b84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	4608      	mov	r0, r1
 8001b8e:	4611      	mov	r1, r2
 8001b90:	461a      	mov	r2, r3
 8001b92:	4603      	mov	r3, r0
 8001b94:	817b      	strh	r3, [r7, #10]
 8001b96:	460b      	mov	r3, r1
 8001b98:	813b      	strh	r3, [r7, #8]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001bac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 f8c2 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00d      	beq.n	8001bf2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001be4:	d103      	bne.n	8001bee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e0aa      	b.n	8001d48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bf2:	897b      	ldrh	r3, [r7, #10]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	6a3a      	ldr	r2, [r7, #32]
 8001c06:	4952      	ldr	r1, [pc, #328]	@ (8001d50 <I2C_RequestMemoryRead+0x1cc>)
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f91d 	bl	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e097      	b.n	8001d48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c30:	6a39      	ldr	r1, [r7, #32]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f9a8 	bl	8001f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00d      	beq.n	8001c5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d107      	bne.n	8001c56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e076      	b.n	8001d48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d105      	bne.n	8001c6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c60:	893b      	ldrh	r3, [r7, #8]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	611a      	str	r2, [r3, #16]
 8001c6a:	e021      	b.n	8001cb0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c6c:	893b      	ldrh	r3, [r7, #8]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c7c:	6a39      	ldr	r1, [r7, #32]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f982 	bl	8001f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00d      	beq.n	8001ca6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d107      	bne.n	8001ca2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ca0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e050      	b.n	8001d48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ca6:	893b      	ldrh	r3, [r7, #8]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cb2:	6a39      	ldr	r1, [r7, #32]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 f967 	bl	8001f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00d      	beq.n	8001cdc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d107      	bne.n	8001cd8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cd6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e035      	b.n	8001d48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 f82b 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00d      	beq.n	8001d20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d12:	d103      	bne.n	8001d1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e013      	b.n	8001d48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d20:	897b      	ldrh	r3, [r7, #10]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d32:	6a3a      	ldr	r2, [r7, #32]
 8001d34:	4906      	ldr	r1, [pc, #24]	@ (8001d50 <I2C_RequestMemoryRead+0x1cc>)
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 f886 	bl	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	00010002 	.word	0x00010002

08001d54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	4613      	mov	r3, r2
 8001d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d64:	e048      	b.n	8001df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6c:	d044      	beq.n	8001df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d6e:	f7ff f83b 	bl	8000de8 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d302      	bcc.n	8001d84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d139      	bne.n	8001df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	0c1b      	lsrs	r3, r3, #16
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d10d      	bne.n	8001daa <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	43da      	mvns	r2, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf0c      	ite	eq
 8001da0:	2301      	moveq	r3, #1
 8001da2:	2300      	movne	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	e00c      	b.n	8001dc4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	43da      	mvns	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	4013      	ands	r3, r2
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d116      	bne.n	8001df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	f043 0220 	orr.w	r2, r3, #32
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e023      	b.n	8001e40 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	0c1b      	lsrs	r3, r3, #16
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d10d      	bne.n	8001e1e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	43da      	mvns	r2, r3
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bf0c      	ite	eq
 8001e14:	2301      	moveq	r3, #1
 8001e16:	2300      	movne	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	e00c      	b.n	8001e38 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	43da      	mvns	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d093      	beq.n	8001d66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e56:	e071      	b.n	8001f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e66:	d123      	bne.n	8001eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e76:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9c:	f043 0204 	orr.w	r2, r3, #4
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e067      	b.n	8001f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb6:	d041      	beq.n	8001f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb8:	f7fe ff96 	bl	8000de8 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d302      	bcc.n	8001ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d136      	bne.n	8001f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	0c1b      	lsrs	r3, r3, #16
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d10c      	bne.n	8001ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	bf14      	ite	ne
 8001eea:	2301      	movne	r3, #1
 8001eec:	2300      	moveq	r3, #0
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	e00b      	b.n	8001f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	43da      	mvns	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4013      	ands	r3, r2
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf14      	ite	ne
 8001f04:	2301      	movne	r3, #1
 8001f06:	2300      	moveq	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d016      	beq.n	8001f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f28:	f043 0220 	orr.w	r2, r3, #32
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e021      	b.n	8001f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	0c1b      	lsrs	r3, r3, #16
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d10c      	bne.n	8001f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	43da      	mvns	r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	4013      	ands	r3, r2
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf14      	ite	ne
 8001f58:	2301      	movne	r3, #1
 8001f5a:	2300      	moveq	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	e00b      	b.n	8001f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf14      	ite	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	2300      	moveq	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f47f af6d 	bne.w	8001e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f94:	e034      	b.n	8002000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f89b 	bl	80020d2 <I2C_IsAcknowledgeFailed>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e034      	b.n	8002010 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fac:	d028      	beq.n	8002000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fae:	f7fe ff1b 	bl	8000de8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d302      	bcc.n	8001fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d11d      	bne.n	8002000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fce:	2b80      	cmp	r3, #128	@ 0x80
 8001fd0:	d016      	beq.n	8002000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fec:	f043 0220 	orr.w	r2, r3, #32
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e007      	b.n	8002010 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800200a:	2b80      	cmp	r3, #128	@ 0x80
 800200c:	d1c3      	bne.n	8001f96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002024:	e049      	b.n	80020ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b10      	cmp	r3, #16
 8002032:	d119      	bne.n	8002068 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0210 	mvn.w	r2, #16
 800203c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e030      	b.n	80020ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002068:	f7fe febe 	bl	8000de8 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	429a      	cmp	r2, r3
 8002076:	d302      	bcc.n	800207e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d11d      	bne.n	80020ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002088:	2b40      	cmp	r3, #64	@ 0x40
 800208a:	d016      	beq.n	80020ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	f043 0220 	orr.w	r2, r3, #32
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e007      	b.n	80020ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c4:	2b40      	cmp	r3, #64	@ 0x40
 80020c6:	d1ae      	bne.n	8002026 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020e8:	d11b      	bne.n	8002122 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	f043 0204 	orr.w	r2, r3, #4
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e267      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d075      	beq.n	800223a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800214e:	4b88      	ldr	r3, [pc, #544]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b04      	cmp	r3, #4
 8002158:	d00c      	beq.n	8002174 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800215a:	4b85      	ldr	r3, [pc, #532]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002162:	2b08      	cmp	r3, #8
 8002164:	d112      	bne.n	800218c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002166:	4b82      	ldr	r3, [pc, #520]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800216e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002172:	d10b      	bne.n	800218c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002174:	4b7e      	ldr	r3, [pc, #504]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d05b      	beq.n	8002238 <HAL_RCC_OscConfig+0x108>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d157      	bne.n	8002238 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e242      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002194:	d106      	bne.n	80021a4 <HAL_RCC_OscConfig+0x74>
 8002196:	4b76      	ldr	r3, [pc, #472]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a75      	ldr	r2, [pc, #468]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 800219c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e01d      	b.n	80021e0 <HAL_RCC_OscConfig+0xb0>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x98>
 80021ae:	4b70      	ldr	r3, [pc, #448]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80021b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a6c      	ldr	r2, [pc, #432]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80021c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e00b      	b.n	80021e0 <HAL_RCC_OscConfig+0xb0>
 80021c8:	4b69      	ldr	r3, [pc, #420]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a68      	ldr	r2, [pc, #416]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80021ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	4b66      	ldr	r3, [pc, #408]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a65      	ldr	r2, [pc, #404]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80021da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d013      	beq.n	8002210 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7fe fdfe 	bl	8000de8 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f0:	f7fe fdfa 	bl	8000de8 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	@ 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e207      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	4b5b      	ldr	r3, [pc, #364]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0xc0>
 800220e:	e014      	b.n	800223a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe fdea 	bl	8000de8 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002218:	f7fe fde6 	bl	8000de8 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	@ 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e1f3      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222a:	4b51      	ldr	r3, [pc, #324]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0xe8>
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d063      	beq.n	800230e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002246:	4b4a      	ldr	r3, [pc, #296]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002252:	4b47      	ldr	r3, [pc, #284]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800225a:	2b08      	cmp	r3, #8
 800225c:	d11c      	bne.n	8002298 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225e:	4b44      	ldr	r3, [pc, #272]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d116      	bne.n	8002298 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226a:	4b41      	ldr	r3, [pc, #260]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_RCC_OscConfig+0x152>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e1c7      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002282:	4b3b      	ldr	r3, [pc, #236]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4937      	ldr	r1, [pc, #220]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002296:	e03a      	b.n	800230e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d020      	beq.n	80022e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a0:	4b34      	ldr	r3, [pc, #208]	@ (8002374 <HAL_RCC_OscConfig+0x244>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7fe fd9f 	bl	8000de8 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ae:	f7fe fd9b 	bl	8000de8 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e1a8      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022cc:	4b28      	ldr	r3, [pc, #160]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4925      	ldr	r1, [pc, #148]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]
 80022e0:	e015      	b.n	800230e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e2:	4b24      	ldr	r3, [pc, #144]	@ (8002374 <HAL_RCC_OscConfig+0x244>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe fd7e 	bl	8000de8 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f0:	f7fe fd7a 	bl	8000de8 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e187      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002302:	4b1b      	ldr	r3, [pc, #108]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d036      	beq.n	8002388 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d016      	beq.n	8002350 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002322:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <HAL_RCC_OscConfig+0x248>)
 8002324:	2201      	movs	r2, #1
 8002326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002328:	f7fe fd5e 	bl	8000de8 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002330:	f7fe fd5a 	bl	8000de8 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e167      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002342:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x200>
 800234e:	e01b      	b.n	8002388 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002350:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <HAL_RCC_OscConfig+0x248>)
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002356:	f7fe fd47 	bl	8000de8 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235c:	e00e      	b.n	800237c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235e:	f7fe fd43 	bl	8000de8 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d907      	bls.n	800237c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e150      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
 8002370:	40023800 	.word	0x40023800
 8002374:	42470000 	.word	0x42470000
 8002378:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	4b88      	ldr	r3, [pc, #544]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 800237e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1ea      	bne.n	800235e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 8097 	beq.w	80024c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239a:	4b81      	ldr	r3, [pc, #516]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10f      	bne.n	80023c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	4b7d      	ldr	r3, [pc, #500]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	4a7c      	ldr	r2, [pc, #496]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023b6:	4b7a      	ldr	r3, [pc, #488]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c2:	2301      	movs	r3, #1
 80023c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	4b77      	ldr	r3, [pc, #476]	@ (80025a4 <HAL_RCC_OscConfig+0x474>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d118      	bne.n	8002404 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d2:	4b74      	ldr	r3, [pc, #464]	@ (80025a4 <HAL_RCC_OscConfig+0x474>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a73      	ldr	r2, [pc, #460]	@ (80025a4 <HAL_RCC_OscConfig+0x474>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023de:	f7fe fd03 	bl	8000de8 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e6:	f7fe fcff 	bl	8000de8 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e10c      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	4b6a      	ldr	r3, [pc, #424]	@ (80025a4 <HAL_RCC_OscConfig+0x474>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x2ea>
 800240c:	4b64      	ldr	r3, [pc, #400]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002410:	4a63      	ldr	r2, [pc, #396]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6713      	str	r3, [r2, #112]	@ 0x70
 8002418:	e01c      	b.n	8002454 <HAL_RCC_OscConfig+0x324>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b05      	cmp	r3, #5
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x30c>
 8002422:	4b5f      	ldr	r3, [pc, #380]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002426:	4a5e      	ldr	r2, [pc, #376]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 8002428:	f043 0304 	orr.w	r3, r3, #4
 800242c:	6713      	str	r3, [r2, #112]	@ 0x70
 800242e:	4b5c      	ldr	r3, [pc, #368]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002432:	4a5b      	ldr	r2, [pc, #364]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6713      	str	r3, [r2, #112]	@ 0x70
 800243a:	e00b      	b.n	8002454 <HAL_RCC_OscConfig+0x324>
 800243c:	4b58      	ldr	r3, [pc, #352]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002440:	4a57      	ldr	r2, [pc, #348]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 8002442:	f023 0301 	bic.w	r3, r3, #1
 8002446:	6713      	str	r3, [r2, #112]	@ 0x70
 8002448:	4b55      	ldr	r3, [pc, #340]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800244c:	4a54      	ldr	r2, [pc, #336]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 800244e:	f023 0304 	bic.w	r3, r3, #4
 8002452:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d015      	beq.n	8002488 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245c:	f7fe fcc4 	bl	8000de8 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002462:	e00a      	b.n	800247a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002464:	f7fe fcc0 	bl	8000de8 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e0cb      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247a:	4b49      	ldr	r3, [pc, #292]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0ee      	beq.n	8002464 <HAL_RCC_OscConfig+0x334>
 8002486:	e014      	b.n	80024b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002488:	f7fe fcae 	bl	8000de8 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002490:	f7fe fcaa 	bl	8000de8 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e0b5      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a6:	4b3e      	ldr	r3, [pc, #248]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1ee      	bne.n	8002490 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d105      	bne.n	80024c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b8:	4b39      	ldr	r3, [pc, #228]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	4a38      	ldr	r2, [pc, #224]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 80024be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80a1 	beq.w	8002610 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ce:	4b34      	ldr	r3, [pc, #208]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d05c      	beq.n	8002594 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d141      	bne.n	8002566 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	4b31      	ldr	r3, [pc, #196]	@ (80025a8 <HAL_RCC_OscConfig+0x478>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fe fc7e 	bl	8000de8 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe fc7a 	bl	8000de8 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e087      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	4b27      	ldr	r3, [pc, #156]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	019b      	lsls	r3, r3, #6
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	3b01      	subs	r3, #1
 8002528:	041b      	lsls	r3, r3, #16
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	491b      	ldr	r1, [pc, #108]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002538:	4b1b      	ldr	r3, [pc, #108]	@ (80025a8 <HAL_RCC_OscConfig+0x478>)
 800253a:	2201      	movs	r2, #1
 800253c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253e:	f7fe fc53 	bl	8000de8 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002546:	f7fe fc4f 	bl	8000de8 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e05c      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002558:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x416>
 8002564:	e054      	b.n	8002610 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002566:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <HAL_RCC_OscConfig+0x478>)
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe fc3c 	bl	8000de8 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002574:	f7fe fc38 	bl	8000de8 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e045      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002586:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x444>
 8002592:	e03d      	b.n	8002610 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d107      	bne.n	80025ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e038      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40007000 	.word	0x40007000
 80025a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025ac:	4b1b      	ldr	r3, [pc, #108]	@ (800261c <HAL_RCC_OscConfig+0x4ec>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d028      	beq.n	800260c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d121      	bne.n	800260c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d11a      	bne.n	800260c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025dc:	4013      	ands	r3, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d111      	bne.n	800260c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	3b01      	subs	r3, #1
 80025f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d107      	bne.n	800260c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002606:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800

08002620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0cc      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002634:	4b68      	ldr	r3, [pc, #416]	@ (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d90c      	bls.n	800265c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b65      	ldr	r3, [pc, #404]	@ (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b63      	ldr	r3, [pc, #396]	@ (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0b8      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d020      	beq.n	80026aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002674:	4b59      	ldr	r3, [pc, #356]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4a58      	ldr	r2, [pc, #352]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800267e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800268c:	4b53      	ldr	r3, [pc, #332]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4a52      	ldr	r2, [pc, #328]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002698:	4b50      	ldr	r3, [pc, #320]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	494d      	ldr	r1, [pc, #308]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d044      	beq.n	8002740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b47      	ldr	r3, [pc, #284]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d119      	bne.n	80026fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e07f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d003      	beq.n	80026de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026de:	4b3f      	ldr	r3, [pc, #252]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e06f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ee:	4b3b      	ldr	r3, [pc, #236]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e067      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fe:	4b37      	ldr	r3, [pc, #220]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f023 0203 	bic.w	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4934      	ldr	r1, [pc, #208]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	4313      	orrs	r3, r2
 800270e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002710:	f7fe fb6a 	bl	8000de8 <HAL_GetTick>
 8002714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	e00a      	b.n	800272e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002718:	f7fe fb66 	bl	8000de8 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e04f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	4b2b      	ldr	r3, [pc, #172]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 020c 	and.w	r2, r3, #12
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	429a      	cmp	r2, r3
 800273e:	d1eb      	bne.n	8002718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002740:	4b25      	ldr	r3, [pc, #148]	@ (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d20c      	bcs.n	8002768 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b22      	ldr	r3, [pc, #136]	@ (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b20      	ldr	r3, [pc, #128]	@ (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e032      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002774:	4b19      	ldr	r3, [pc, #100]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4916      	ldr	r1, [pc, #88]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002792:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	490e      	ldr	r1, [pc, #56]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027a6:	f000 f821 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 80027aa:	4602      	mov	r2, r0
 80027ac:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	490a      	ldr	r1, [pc, #40]	@ (80027e0 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	5ccb      	ldrb	r3, [r1, r3]
 80027ba:	fa22 f303 	lsr.w	r3, r2, r3
 80027be:	4a09      	ldr	r2, [pc, #36]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027c2:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <HAL_RCC_ClockConfig+0x1c8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe faca 	bl	8000d60 <HAL_InitTick>

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023c00 	.word	0x40023c00
 80027dc:	40023800 	.word	0x40023800
 80027e0:	080043d8 	.word	0x080043d8
 80027e4:	20000000 	.word	0x20000000
 80027e8:	20000004 	.word	0x20000004

080027ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f0:	b090      	sub	sp, #64	@ 0x40
 80027f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80027f8:	2300      	movs	r3, #0
 80027fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027fc:	2300      	movs	r3, #0
 80027fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002804:	4b59      	ldr	r3, [pc, #356]	@ (800296c <HAL_RCC_GetSysClockFreq+0x180>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 030c 	and.w	r3, r3, #12
 800280c:	2b08      	cmp	r3, #8
 800280e:	d00d      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x40>
 8002810:	2b08      	cmp	r3, #8
 8002812:	f200 80a1 	bhi.w	8002958 <HAL_RCC_GetSysClockFreq+0x16c>
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x34>
 800281a:	2b04      	cmp	r3, #4
 800281c:	d003      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x3a>
 800281e:	e09b      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002820:	4b53      	ldr	r3, [pc, #332]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x184>)
 8002822:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002824:	e09b      	b.n	800295e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002826:	4b53      	ldr	r3, [pc, #332]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x188>)
 8002828:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800282a:	e098      	b.n	800295e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800282c:	4b4f      	ldr	r3, [pc, #316]	@ (800296c <HAL_RCC_GetSysClockFreq+0x180>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002834:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002836:	4b4d      	ldr	r3, [pc, #308]	@ (800296c <HAL_RCC_GetSysClockFreq+0x180>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d028      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002842:	4b4a      	ldr	r3, [pc, #296]	@ (800296c <HAL_RCC_GetSysClockFreq+0x180>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	099b      	lsrs	r3, r3, #6
 8002848:	2200      	movs	r2, #0
 800284a:	623b      	str	r3, [r7, #32]
 800284c:	627a      	str	r2, [r7, #36]	@ 0x24
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002854:	2100      	movs	r1, #0
 8002856:	4b47      	ldr	r3, [pc, #284]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x188>)
 8002858:	fb03 f201 	mul.w	r2, r3, r1
 800285c:	2300      	movs	r3, #0
 800285e:	fb00 f303 	mul.w	r3, r0, r3
 8002862:	4413      	add	r3, r2
 8002864:	4a43      	ldr	r2, [pc, #268]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x188>)
 8002866:	fba0 1202 	umull	r1, r2, r0, r2
 800286a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800286c:	460a      	mov	r2, r1
 800286e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002872:	4413      	add	r3, r2
 8002874:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002878:	2200      	movs	r2, #0
 800287a:	61bb      	str	r3, [r7, #24]
 800287c:	61fa      	str	r2, [r7, #28]
 800287e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002882:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002886:	f7fd fcfb 	bl	8000280 <__aeabi_uldivmod>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4613      	mov	r3, r2
 8002890:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002892:	e053      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002894:	4b35      	ldr	r3, [pc, #212]	@ (800296c <HAL_RCC_GetSysClockFreq+0x180>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	099b      	lsrs	r3, r3, #6
 800289a:	2200      	movs	r2, #0
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	617a      	str	r2, [r7, #20]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028a6:	f04f 0b00 	mov.w	fp, #0
 80028aa:	4652      	mov	r2, sl
 80028ac:	465b      	mov	r3, fp
 80028ae:	f04f 0000 	mov.w	r0, #0
 80028b2:	f04f 0100 	mov.w	r1, #0
 80028b6:	0159      	lsls	r1, r3, #5
 80028b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028bc:	0150      	lsls	r0, r2, #5
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	ebb2 080a 	subs.w	r8, r2, sl
 80028c6:	eb63 090b 	sbc.w	r9, r3, fp
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028de:	ebb2 0408 	subs.w	r4, r2, r8
 80028e2:	eb63 0509 	sbc.w	r5, r3, r9
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	00eb      	lsls	r3, r5, #3
 80028f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028f4:	00e2      	lsls	r2, r4, #3
 80028f6:	4614      	mov	r4, r2
 80028f8:	461d      	mov	r5, r3
 80028fa:	eb14 030a 	adds.w	r3, r4, sl
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	eb45 030b 	adc.w	r3, r5, fp
 8002904:	607b      	str	r3, [r7, #4]
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002912:	4629      	mov	r1, r5
 8002914:	028b      	lsls	r3, r1, #10
 8002916:	4621      	mov	r1, r4
 8002918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800291c:	4621      	mov	r1, r4
 800291e:	028a      	lsls	r2, r1, #10
 8002920:	4610      	mov	r0, r2
 8002922:	4619      	mov	r1, r3
 8002924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002926:	2200      	movs	r2, #0
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	60fa      	str	r2, [r7, #12]
 800292c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002930:	f7fd fca6 	bl	8000280 <__aeabi_uldivmod>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4613      	mov	r3, r2
 800293a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800293c:	4b0b      	ldr	r3, [pc, #44]	@ (800296c <HAL_RCC_GetSysClockFreq+0x180>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	3301      	adds	r3, #1
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800294c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800294e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002956:	e002      	b.n	800295e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x184>)
 800295a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800295c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800295e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002960:	4618      	mov	r0, r3
 8002962:	3740      	adds	r7, #64	@ 0x40
 8002964:	46bd      	mov	sp, r7
 8002966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800
 8002970:	00f42400 	.word	0x00f42400
 8002974:	017d7840 	.word	0x017d7840

08002978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800297c:	4b03      	ldr	r3, [pc, #12]	@ (800298c <HAL_RCC_GetHCLKFreq+0x14>)
 800297e:	681b      	ldr	r3, [r3, #0]
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000000 	.word	0x20000000

08002990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002994:	f7ff fff0 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b05      	ldr	r3, [pc, #20]	@ (80029b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	0a9b      	lsrs	r3, r3, #10
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4903      	ldr	r1, [pc, #12]	@ (80029b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800
 80029b4:	080043e8 	.word	0x080043e8

080029b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029bc:	f7ff ffdc 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	0b5b      	lsrs	r3, r3, #13
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	4903      	ldr	r1, [pc, #12]	@ (80029dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ce:	5ccb      	ldrb	r3, [r1, r3]
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40023800 	.word	0x40023800
 80029dc:	080043e8 	.word	0x080043e8

080029e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e042      	b.n	8002a78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe f88c 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2224      	movs	r2, #36	@ 0x24
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fd69 	bl	80034fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695a      	ldr	r2, [r3, #20]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	@ 0x28
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d175      	bne.n	8002b8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_UART_Transmit+0x2c>
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e06e      	b.n	8002b8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2221      	movs	r2, #33	@ 0x21
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002abe:	f7fe f993 	bl	8000de8 <HAL_GetTick>
 8002ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	88fa      	ldrh	r2, [r7, #6]
 8002ac8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	88fa      	ldrh	r2, [r7, #6]
 8002ace:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ad8:	d108      	bne.n	8002aec <HAL_UART_Transmit+0x6c>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d104      	bne.n	8002aec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	61bb      	str	r3, [r7, #24]
 8002aea:	e003      	b.n	8002af4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002af4:	e02e      	b.n	8002b54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2200      	movs	r2, #0
 8002afe:	2180      	movs	r1, #128	@ 0x80
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fb05 	bl	8003110 <UART_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e03a      	b.n	8002b8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10b      	bne.n	8002b36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	3302      	adds	r3, #2
 8002b32:	61bb      	str	r3, [r7, #24]
 8002b34:	e007      	b.n	8002b46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	3301      	adds	r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1cb      	bne.n	8002af6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2200      	movs	r2, #0
 8002b66:	2140      	movs	r1, #64	@ 0x40
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 fad1 	bl	8003110 <UART_WaitOnFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e006      	b.n	8002b8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e000      	b.n	8002b8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b8c:	2302      	movs	r3, #2
  }
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3720      	adds	r7, #32
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b0ba      	sub	sp, #232	@ 0xe8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10f      	bne.n	8002bfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d009      	beq.n	8002bfe <HAL_UART_IRQHandler+0x66>
 8002bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fbc2 	bl	8003380 <UART_Receive_IT>
      return;
 8002bfc:	e25b      	b.n	80030b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80de 	beq.w	8002dc4 <HAL_UART_IRQHandler+0x22c>
 8002c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d106      	bne.n	8002c22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c18:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80d1 	beq.w	8002dc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <HAL_UART_IRQHandler+0xae>
 8002c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3e:	f043 0201 	orr.w	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00b      	beq.n	8002c6a <HAL_UART_IRQHandler+0xd2>
 8002c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	f043 0202 	orr.w	r2, r3, #2
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <HAL_UART_IRQHandler+0xf6>
 8002c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c86:	f043 0204 	orr.w	r2, r3, #4
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d011      	beq.n	8002cbe <HAL_UART_IRQHandler+0x126>
 8002c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d105      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb6:	f043 0208 	orr.w	r2, r3, #8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 81f2 	beq.w	80030ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x14e>
 8002cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fb4d 	bl	8003380 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf0:	2b40      	cmp	r3, #64	@ 0x40
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d103      	bne.n	8002d12 <HAL_UART_IRQHandler+0x17a>
 8002d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d04f      	beq.n	8002db2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fa55 	bl	80031c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d22:	2b40      	cmp	r3, #64	@ 0x40
 8002d24:	d141      	bne.n	8002daa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3314      	adds	r3, #20
 8002d2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d34:	e853 3f00 	ldrex	r3, [r3]
 8002d38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3314      	adds	r3, #20
 8002d4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002d52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002d56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002d5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002d62:	e841 2300 	strex	r3, r2, [r1]
 8002d66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1d9      	bne.n	8002d26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d013      	beq.n	8002da2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f78 <HAL_UART_IRQHandler+0x3e0>)
 8002d80:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe f9df 	bl	800114a <HAL_DMA_Abort_IT>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d016      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da0:	e00e      	b.n	8002dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f99e 	bl	80030e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da8:	e00a      	b.n	8002dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f99a 	bl	80030e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db0:	e006      	b.n	8002dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f996 	bl	80030e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002dbe:	e175      	b.n	80030ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc0:	bf00      	nop
    return;
 8002dc2:	e173      	b.n	80030ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	f040 814f 	bne.w	800306c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8148 	beq.w	800306c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 8141 	beq.w	800306c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dea:	2300      	movs	r3, #0
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e0a:	2b40      	cmp	r3, #64	@ 0x40
 8002e0c:	f040 80b6 	bne.w	8002f7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8145 	beq.w	80030b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	f080 813e 	bcs.w	80030b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e46:	f000 8088 	beq.w	8002f5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	330c      	adds	r3, #12
 8002e50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e58:	e853 3f00 	ldrex	r3, [r3]
 8002e5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	330c      	adds	r3, #12
 8002e72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002e76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e86:	e841 2300 	strex	r3, r2, [r1]
 8002e8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1d9      	bne.n	8002e4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3314      	adds	r3, #20
 8002e9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002ea6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3314      	adds	r3, #20
 8002eb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002eba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002ebe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002ec6:	e841 2300 	strex	r3, r2, [r1]
 8002eca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ecc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1e1      	bne.n	8002e96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3314      	adds	r3, #20
 8002ed8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002edc:	e853 3f00 	ldrex	r3, [r3]
 8002ee0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002ee2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3314      	adds	r3, #20
 8002ef2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002ef6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002efc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002efe:	e841 2300 	strex	r3, r2, [r1]
 8002f02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002f04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1e3      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f22:	e853 3f00 	ldrex	r3, [r3]
 8002f26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002f28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f2a:	f023 0310 	bic.w	r3, r3, #16
 8002f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	330c      	adds	r3, #12
 8002f38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002f3c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f3e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f44:	e841 2300 	strex	r3, r2, [r1]
 8002f48:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e3      	bne.n	8002f18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe f888 	bl	800106a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	4619      	mov	r1, r3
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f8c1 	bl	80030f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f76:	e09b      	b.n	80030b0 <HAL_UART_IRQHandler+0x518>
 8002f78:	08003289 	.word	0x08003289
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 808e 	beq.w	80030b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002f98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8089 	beq.w	80030b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	330c      	adds	r3, #12
 8002fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fac:	e853 3f00 	ldrex	r3, [r3]
 8002fb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002fc6:	647a      	str	r2, [r7, #68]	@ 0x44
 8002fc8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002fcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fce:	e841 2300 	strex	r3, r2, [r1]
 8002fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1e3      	bne.n	8002fa2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3314      	adds	r3, #20
 8002fe0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	e853 3f00 	ldrex	r3, [r3]
 8002fe8:	623b      	str	r3, [r7, #32]
   return(result);
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	3314      	adds	r3, #20
 8002ffa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002ffe:	633a      	str	r2, [r7, #48]	@ 0x30
 8003000:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003002:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003006:	e841 2300 	strex	r3, r2, [r1]
 800300a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800300c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1e3      	bne.n	8002fda <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	330c      	adds	r3, #12
 8003026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	e853 3f00 	ldrex	r3, [r3]
 800302e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 0310 	bic.w	r3, r3, #16
 8003036:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	330c      	adds	r3, #12
 8003040:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003044:	61fa      	str	r2, [r7, #28]
 8003046:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003048:	69b9      	ldr	r1, [r7, #24]
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	e841 2300 	strex	r3, r2, [r1]
 8003050:	617b      	str	r3, [r7, #20]
   return(result);
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e3      	bne.n	8003020 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800305e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003062:	4619      	mov	r1, r3
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f847 	bl	80030f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800306a:	e023      	b.n	80030b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800306c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003074:	2b00      	cmp	r3, #0
 8003076:	d009      	beq.n	800308c <HAL_UART_IRQHandler+0x4f4>
 8003078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800307c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f913 	bl	80032b0 <UART_Transmit_IT>
    return;
 800308a:	e014      	b.n	80030b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800308c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00e      	beq.n	80030b6 <HAL_UART_IRQHandler+0x51e>
 8003098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800309c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f953 	bl	8003350 <UART_EndTransmit_IT>
    return;
 80030aa:	e004      	b.n	80030b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80030ac:	bf00      	nop
 80030ae:	e002      	b.n	80030b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80030b0:	bf00      	nop
 80030b2:	e000      	b.n	80030b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80030b4:	bf00      	nop
  }
}
 80030b6:	37e8      	adds	r7, #232	@ 0xe8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	4613      	mov	r3, r2
 800311e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003120:	e03b      	b.n	800319a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003128:	d037      	beq.n	800319a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312a:	f7fd fe5d 	bl	8000de8 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	6a3a      	ldr	r2, [r7, #32]
 8003136:	429a      	cmp	r2, r3
 8003138:	d302      	bcc.n	8003140 <UART_WaitOnFlagUntilTimeout+0x30>
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e03a      	b.n	80031ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b00      	cmp	r3, #0
 8003150:	d023      	beq.n	800319a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b80      	cmp	r3, #128	@ 0x80
 8003156:	d020      	beq.n	800319a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b40      	cmp	r3, #64	@ 0x40
 800315c:	d01d      	beq.n	800319a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b08      	cmp	r3, #8
 800316a:	d116      	bne.n	800319a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f81d 	bl	80031c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2208      	movs	r2, #8
 800318c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e00f      	b.n	80031ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4013      	ands	r3, r2
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	bf0c      	ite	eq
 80031aa:	2301      	moveq	r3, #1
 80031ac:	2300      	movne	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d0b4      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b095      	sub	sp, #84	@ 0x54
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	330c      	adds	r3, #12
 80031d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d4:	e853 3f00 	ldrex	r3, [r3]
 80031d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	330c      	adds	r3, #12
 80031e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80031ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031f2:	e841 2300 	strex	r3, r2, [r1]
 80031f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1e5      	bne.n	80031ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3314      	adds	r3, #20
 8003204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	e853 3f00 	ldrex	r3, [r3]
 800320c:	61fb      	str	r3, [r7, #28]
   return(result);
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	3314      	adds	r3, #20
 800321c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800321e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003220:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003222:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003224:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003226:	e841 2300 	strex	r3, r2, [r1]
 800322a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800322c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1e5      	bne.n	80031fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	2b01      	cmp	r3, #1
 8003238:	d119      	bne.n	800326e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	60bb      	str	r3, [r7, #8]
   return(result);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f023 0310 	bic.w	r3, r3, #16
 8003250:	647b      	str	r3, [r7, #68]	@ 0x44
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	330c      	adds	r3, #12
 8003258:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800325a:	61ba      	str	r2, [r7, #24]
 800325c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	6979      	ldr	r1, [r7, #20]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	613b      	str	r3, [r7, #16]
   return(result);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e5      	bne.n	800323a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800327c:	bf00      	nop
 800327e:	3754      	adds	r7, #84	@ 0x54
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003294:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f7ff ff1e 	bl	80030e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032a8:	bf00      	nop
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b21      	cmp	r3, #33	@ 0x21
 80032c2:	d13e      	bne.n	8003342 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032cc:	d114      	bne.n	80032f8 <UART_Transmit_IT+0x48>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d110      	bne.n	80032f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	1c9a      	adds	r2, r3, #2
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	621a      	str	r2, [r3, #32]
 80032f6:	e008      	b.n	800330a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	1c59      	adds	r1, r3, #1
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6211      	str	r1, [r2, #32]
 8003302:	781a      	ldrb	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29b      	uxth	r3, r3
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4619      	mov	r1, r3
 8003318:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10f      	bne.n	800333e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800332c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800333c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	e000      	b.n	8003344 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003342:	2302      	movs	r3, #2
  }
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003366:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff fea3 	bl	80030bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08c      	sub	sp, #48	@ 0x30
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b22      	cmp	r3, #34	@ 0x22
 8003392:	f040 80ae 	bne.w	80034f2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800339e:	d117      	bne.n	80033d0 <UART_Receive_IT+0x50>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d113      	bne.n	80033d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033be:	b29a      	uxth	r2, r3
 80033c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c8:	1c9a      	adds	r2, r3, #2
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80033ce:	e026      	b.n	800341e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033e2:	d007      	beq.n	80033f4 <UART_Receive_IT+0x74>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <UART_Receive_IT+0x82>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d106      	bne.n	8003402 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	e008      	b.n	8003414 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800340e:	b2da      	uxtb	r2, r3
 8003410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003412:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29b      	uxth	r3, r3
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	4619      	mov	r1, r3
 800342c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800342e:	2b00      	cmp	r3, #0
 8003430:	d15d      	bne.n	80034ee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0220 	bic.w	r2, r2, #32
 8003440:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003450:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0201 	bic.w	r2, r2, #1
 8003460:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003474:	2b01      	cmp	r3, #1
 8003476:	d135      	bne.n	80034e4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	e853 3f00 	ldrex	r3, [r3]
 800348c:	613b      	str	r3, [r7, #16]
   return(result);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f023 0310 	bic.w	r3, r3, #16
 8003494:	627b      	str	r3, [r7, #36]	@ 0x24
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	330c      	adds	r3, #12
 800349c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800349e:	623a      	str	r2, [r7, #32]
 80034a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a2:	69f9      	ldr	r1, [r7, #28]
 80034a4:	6a3a      	ldr	r2, [r7, #32]
 80034a6:	e841 2300 	strex	r3, r2, [r1]
 80034aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1e5      	bne.n	800347e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b10      	cmp	r3, #16
 80034be:	d10a      	bne.n	80034d6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034da:	4619      	mov	r1, r3
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff fe0b 	bl	80030f8 <HAL_UARTEx_RxEventCallback>
 80034e2:	e002      	b.n	80034ea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff fdf3 	bl	80030d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e002      	b.n	80034f4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	e000      	b.n	80034f4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
  }
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3730      	adds	r7, #48	@ 0x30
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003500:	b0c0      	sub	sp, #256	@ 0x100
 8003502:	af00      	add	r7, sp, #0
 8003504:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003518:	68d9      	ldr	r1, [r3, #12]
 800351a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	ea40 0301 	orr.w	r3, r0, r1
 8003524:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	431a      	orrs	r2, r3
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	431a      	orrs	r2, r3
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003554:	f021 010c 	bic.w	r1, r1, #12
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003562:	430b      	orrs	r3, r1
 8003564:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003576:	6999      	ldr	r1, [r3, #24]
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	ea40 0301 	orr.w	r3, r0, r1
 8003582:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4b8f      	ldr	r3, [pc, #572]	@ (80037c8 <UART_SetConfig+0x2cc>)
 800358c:	429a      	cmp	r2, r3
 800358e:	d005      	beq.n	800359c <UART_SetConfig+0xa0>
 8003590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	4b8d      	ldr	r3, [pc, #564]	@ (80037cc <UART_SetConfig+0x2d0>)
 8003598:	429a      	cmp	r2, r3
 800359a:	d104      	bne.n	80035a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800359c:	f7ff fa0c 	bl	80029b8 <HAL_RCC_GetPCLK2Freq>
 80035a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80035a4:	e003      	b.n	80035ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035a6:	f7ff f9f3 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 80035aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035b8:	f040 810c 	bne.w	80037d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035c0:	2200      	movs	r2, #0
 80035c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80035ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80035ce:	4622      	mov	r2, r4
 80035d0:	462b      	mov	r3, r5
 80035d2:	1891      	adds	r1, r2, r2
 80035d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80035d6:	415b      	adcs	r3, r3
 80035d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80035de:	4621      	mov	r1, r4
 80035e0:	eb12 0801 	adds.w	r8, r2, r1
 80035e4:	4629      	mov	r1, r5
 80035e6:	eb43 0901 	adc.w	r9, r3, r1
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035fe:	4690      	mov	r8, r2
 8003600:	4699      	mov	r9, r3
 8003602:	4623      	mov	r3, r4
 8003604:	eb18 0303 	adds.w	r3, r8, r3
 8003608:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800360c:	462b      	mov	r3, r5
 800360e:	eb49 0303 	adc.w	r3, r9, r3
 8003612:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003622:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003626:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800362a:	460b      	mov	r3, r1
 800362c:	18db      	adds	r3, r3, r3
 800362e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003630:	4613      	mov	r3, r2
 8003632:	eb42 0303 	adc.w	r3, r2, r3
 8003636:	657b      	str	r3, [r7, #84]	@ 0x54
 8003638:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800363c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003640:	f7fc fe1e 	bl	8000280 <__aeabi_uldivmod>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4b61      	ldr	r3, [pc, #388]	@ (80037d0 <UART_SetConfig+0x2d4>)
 800364a:	fba3 2302 	umull	r2, r3, r3, r2
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	011c      	lsls	r4, r3, #4
 8003652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003656:	2200      	movs	r2, #0
 8003658:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800365c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003660:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003664:	4642      	mov	r2, r8
 8003666:	464b      	mov	r3, r9
 8003668:	1891      	adds	r1, r2, r2
 800366a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800366c:	415b      	adcs	r3, r3
 800366e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003670:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003674:	4641      	mov	r1, r8
 8003676:	eb12 0a01 	adds.w	sl, r2, r1
 800367a:	4649      	mov	r1, r9
 800367c:	eb43 0b01 	adc.w	fp, r3, r1
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800368c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003694:	4692      	mov	sl, r2
 8003696:	469b      	mov	fp, r3
 8003698:	4643      	mov	r3, r8
 800369a:	eb1a 0303 	adds.w	r3, sl, r3
 800369e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036a2:	464b      	mov	r3, r9
 80036a4:	eb4b 0303 	adc.w	r3, fp, r3
 80036a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80036bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036c0:	460b      	mov	r3, r1
 80036c2:	18db      	adds	r3, r3, r3
 80036c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80036c6:	4613      	mov	r3, r2
 80036c8:	eb42 0303 	adc.w	r3, r2, r3
 80036cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80036d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80036d6:	f7fc fdd3 	bl	8000280 <__aeabi_uldivmod>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4611      	mov	r1, r2
 80036e0:	4b3b      	ldr	r3, [pc, #236]	@ (80037d0 <UART_SetConfig+0x2d4>)
 80036e2:	fba3 2301 	umull	r2, r3, r3, r1
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	2264      	movs	r2, #100	@ 0x64
 80036ea:	fb02 f303 	mul.w	r3, r2, r3
 80036ee:	1acb      	subs	r3, r1, r3
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80036f6:	4b36      	ldr	r3, [pc, #216]	@ (80037d0 <UART_SetConfig+0x2d4>)
 80036f8:	fba3 2302 	umull	r2, r3, r3, r2
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003704:	441c      	add	r4, r3
 8003706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800370a:	2200      	movs	r2, #0
 800370c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003710:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003714:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003718:	4642      	mov	r2, r8
 800371a:	464b      	mov	r3, r9
 800371c:	1891      	adds	r1, r2, r2
 800371e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003720:	415b      	adcs	r3, r3
 8003722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003724:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003728:	4641      	mov	r1, r8
 800372a:	1851      	adds	r1, r2, r1
 800372c:	6339      	str	r1, [r7, #48]	@ 0x30
 800372e:	4649      	mov	r1, r9
 8003730:	414b      	adcs	r3, r1
 8003732:	637b      	str	r3, [r7, #52]	@ 0x34
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003740:	4659      	mov	r1, fp
 8003742:	00cb      	lsls	r3, r1, #3
 8003744:	4651      	mov	r1, sl
 8003746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800374a:	4651      	mov	r1, sl
 800374c:	00ca      	lsls	r2, r1, #3
 800374e:	4610      	mov	r0, r2
 8003750:	4619      	mov	r1, r3
 8003752:	4603      	mov	r3, r0
 8003754:	4642      	mov	r2, r8
 8003756:	189b      	adds	r3, r3, r2
 8003758:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800375c:	464b      	mov	r3, r9
 800375e:	460a      	mov	r2, r1
 8003760:	eb42 0303 	adc.w	r3, r2, r3
 8003764:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003774:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003778:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800377c:	460b      	mov	r3, r1
 800377e:	18db      	adds	r3, r3, r3
 8003780:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003782:	4613      	mov	r3, r2
 8003784:	eb42 0303 	adc.w	r3, r2, r3
 8003788:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800378a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800378e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003792:	f7fc fd75 	bl	8000280 <__aeabi_uldivmod>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4b0d      	ldr	r3, [pc, #52]	@ (80037d0 <UART_SetConfig+0x2d4>)
 800379c:	fba3 1302 	umull	r1, r3, r3, r2
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	2164      	movs	r1, #100	@ 0x64
 80037a4:	fb01 f303 	mul.w	r3, r1, r3
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	3332      	adds	r3, #50	@ 0x32
 80037ae:	4a08      	ldr	r2, [pc, #32]	@ (80037d0 <UART_SetConfig+0x2d4>)
 80037b0:	fba2 2303 	umull	r2, r3, r2, r3
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	f003 0207 	and.w	r2, r3, #7
 80037ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4422      	add	r2, r4
 80037c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037c4:	e106      	b.n	80039d4 <UART_SetConfig+0x4d8>
 80037c6:	bf00      	nop
 80037c8:	40011000 	.word	0x40011000
 80037cc:	40011400 	.word	0x40011400
 80037d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037d8:	2200      	movs	r2, #0
 80037da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80037de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80037e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80037e6:	4642      	mov	r2, r8
 80037e8:	464b      	mov	r3, r9
 80037ea:	1891      	adds	r1, r2, r2
 80037ec:	6239      	str	r1, [r7, #32]
 80037ee:	415b      	adcs	r3, r3
 80037f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037f6:	4641      	mov	r1, r8
 80037f8:	1854      	adds	r4, r2, r1
 80037fa:	4649      	mov	r1, r9
 80037fc:	eb43 0501 	adc.w	r5, r3, r1
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	00eb      	lsls	r3, r5, #3
 800380a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800380e:	00e2      	lsls	r2, r4, #3
 8003810:	4614      	mov	r4, r2
 8003812:	461d      	mov	r5, r3
 8003814:	4643      	mov	r3, r8
 8003816:	18e3      	adds	r3, r4, r3
 8003818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800381c:	464b      	mov	r3, r9
 800381e:	eb45 0303 	adc.w	r3, r5, r3
 8003822:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003832:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003842:	4629      	mov	r1, r5
 8003844:	008b      	lsls	r3, r1, #2
 8003846:	4621      	mov	r1, r4
 8003848:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800384c:	4621      	mov	r1, r4
 800384e:	008a      	lsls	r2, r1, #2
 8003850:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003854:	f7fc fd14 	bl	8000280 <__aeabi_uldivmod>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4b60      	ldr	r3, [pc, #384]	@ (80039e0 <UART_SetConfig+0x4e4>)
 800385e:	fba3 2302 	umull	r2, r3, r3, r2
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	011c      	lsls	r4, r3, #4
 8003866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800386a:	2200      	movs	r2, #0
 800386c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003870:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003874:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003878:	4642      	mov	r2, r8
 800387a:	464b      	mov	r3, r9
 800387c:	1891      	adds	r1, r2, r2
 800387e:	61b9      	str	r1, [r7, #24]
 8003880:	415b      	adcs	r3, r3
 8003882:	61fb      	str	r3, [r7, #28]
 8003884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003888:	4641      	mov	r1, r8
 800388a:	1851      	adds	r1, r2, r1
 800388c:	6139      	str	r1, [r7, #16]
 800388e:	4649      	mov	r1, r9
 8003890:	414b      	adcs	r3, r1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038a0:	4659      	mov	r1, fp
 80038a2:	00cb      	lsls	r3, r1, #3
 80038a4:	4651      	mov	r1, sl
 80038a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038aa:	4651      	mov	r1, sl
 80038ac:	00ca      	lsls	r2, r1, #3
 80038ae:	4610      	mov	r0, r2
 80038b0:	4619      	mov	r1, r3
 80038b2:	4603      	mov	r3, r0
 80038b4:	4642      	mov	r2, r8
 80038b6:	189b      	adds	r3, r3, r2
 80038b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038bc:	464b      	mov	r3, r9
 80038be:	460a      	mov	r2, r1
 80038c0:	eb42 0303 	adc.w	r3, r2, r3
 80038c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80038e0:	4649      	mov	r1, r9
 80038e2:	008b      	lsls	r3, r1, #2
 80038e4:	4641      	mov	r1, r8
 80038e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038ea:	4641      	mov	r1, r8
 80038ec:	008a      	lsls	r2, r1, #2
 80038ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80038f2:	f7fc fcc5 	bl	8000280 <__aeabi_uldivmod>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4611      	mov	r1, r2
 80038fc:	4b38      	ldr	r3, [pc, #224]	@ (80039e0 <UART_SetConfig+0x4e4>)
 80038fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	2264      	movs	r2, #100	@ 0x64
 8003906:	fb02 f303 	mul.w	r3, r2, r3
 800390a:	1acb      	subs	r3, r1, r3
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	3332      	adds	r3, #50	@ 0x32
 8003910:	4a33      	ldr	r2, [pc, #204]	@ (80039e0 <UART_SetConfig+0x4e4>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800391c:	441c      	add	r4, r3
 800391e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003922:	2200      	movs	r2, #0
 8003924:	673b      	str	r3, [r7, #112]	@ 0x70
 8003926:	677a      	str	r2, [r7, #116]	@ 0x74
 8003928:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800392c:	4642      	mov	r2, r8
 800392e:	464b      	mov	r3, r9
 8003930:	1891      	adds	r1, r2, r2
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	415b      	adcs	r3, r3
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800393c:	4641      	mov	r1, r8
 800393e:	1851      	adds	r1, r2, r1
 8003940:	6039      	str	r1, [r7, #0]
 8003942:	4649      	mov	r1, r9
 8003944:	414b      	adcs	r3, r1
 8003946:	607b      	str	r3, [r7, #4]
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003954:	4659      	mov	r1, fp
 8003956:	00cb      	lsls	r3, r1, #3
 8003958:	4651      	mov	r1, sl
 800395a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800395e:	4651      	mov	r1, sl
 8003960:	00ca      	lsls	r2, r1, #3
 8003962:	4610      	mov	r0, r2
 8003964:	4619      	mov	r1, r3
 8003966:	4603      	mov	r3, r0
 8003968:	4642      	mov	r2, r8
 800396a:	189b      	adds	r3, r3, r2
 800396c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800396e:	464b      	mov	r3, r9
 8003970:	460a      	mov	r2, r1
 8003972:	eb42 0303 	adc.w	r3, r2, r3
 8003976:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	663b      	str	r3, [r7, #96]	@ 0x60
 8003982:	667a      	str	r2, [r7, #100]	@ 0x64
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003990:	4649      	mov	r1, r9
 8003992:	008b      	lsls	r3, r1, #2
 8003994:	4641      	mov	r1, r8
 8003996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800399a:	4641      	mov	r1, r8
 800399c:	008a      	lsls	r2, r1, #2
 800399e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80039a2:	f7fc fc6d 	bl	8000280 <__aeabi_uldivmod>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4b0d      	ldr	r3, [pc, #52]	@ (80039e0 <UART_SetConfig+0x4e4>)
 80039ac:	fba3 1302 	umull	r1, r3, r3, r2
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	2164      	movs	r1, #100	@ 0x64
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	3332      	adds	r3, #50	@ 0x32
 80039be:	4a08      	ldr	r2, [pc, #32]	@ (80039e0 <UART_SetConfig+0x4e4>)
 80039c0:	fba2 2303 	umull	r2, r3, r2, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	f003 020f 	and.w	r2, r3, #15
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4422      	add	r2, r4
 80039d2:	609a      	str	r2, [r3, #8]
}
 80039d4:	bf00      	nop
 80039d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80039da:	46bd      	mov	sp, r7
 80039dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039e0:	51eb851f 	.word	0x51eb851f

080039e4 <sniprintf>:
 80039e4:	b40c      	push	{r2, r3}
 80039e6:	b530      	push	{r4, r5, lr}
 80039e8:	4b17      	ldr	r3, [pc, #92]	@ (8003a48 <sniprintf+0x64>)
 80039ea:	1e0c      	subs	r4, r1, #0
 80039ec:	681d      	ldr	r5, [r3, #0]
 80039ee:	b09d      	sub	sp, #116	@ 0x74
 80039f0:	da08      	bge.n	8003a04 <sniprintf+0x20>
 80039f2:	238b      	movs	r3, #139	@ 0x8b
 80039f4:	602b      	str	r3, [r5, #0]
 80039f6:	f04f 30ff 	mov.w	r0, #4294967295
 80039fa:	b01d      	add	sp, #116	@ 0x74
 80039fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a00:	b002      	add	sp, #8
 8003a02:	4770      	bx	lr
 8003a04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003a08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003a0c:	bf14      	ite	ne
 8003a0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003a12:	4623      	moveq	r3, r4
 8003a14:	9304      	str	r3, [sp, #16]
 8003a16:	9307      	str	r3, [sp, #28]
 8003a18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a1c:	9002      	str	r0, [sp, #8]
 8003a1e:	9006      	str	r0, [sp, #24]
 8003a20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003a24:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003a26:	ab21      	add	r3, sp, #132	@ 0x84
 8003a28:	a902      	add	r1, sp, #8
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	f000 f995 	bl	8003d5c <_svfiprintf_r>
 8003a32:	1c43      	adds	r3, r0, #1
 8003a34:	bfbc      	itt	lt
 8003a36:	238b      	movlt	r3, #139	@ 0x8b
 8003a38:	602b      	strlt	r3, [r5, #0]
 8003a3a:	2c00      	cmp	r4, #0
 8003a3c:	d0dd      	beq.n	80039fa <sniprintf+0x16>
 8003a3e:	9b02      	ldr	r3, [sp, #8]
 8003a40:	2200      	movs	r2, #0
 8003a42:	701a      	strb	r2, [r3, #0]
 8003a44:	e7d9      	b.n	80039fa <sniprintf+0x16>
 8003a46:	bf00      	nop
 8003a48:	2000000c 	.word	0x2000000c

08003a4c <memset>:
 8003a4c:	4402      	add	r2, r0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d100      	bne.n	8003a56 <memset+0xa>
 8003a54:	4770      	bx	lr
 8003a56:	f803 1b01 	strb.w	r1, [r3], #1
 8003a5a:	e7f9      	b.n	8003a50 <memset+0x4>

08003a5c <__errno>:
 8003a5c:	4b01      	ldr	r3, [pc, #4]	@ (8003a64 <__errno+0x8>)
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	2000000c 	.word	0x2000000c

08003a68 <__libc_init_array>:
 8003a68:	b570      	push	{r4, r5, r6, lr}
 8003a6a:	4d0d      	ldr	r5, [pc, #52]	@ (8003aa0 <__libc_init_array+0x38>)
 8003a6c:	4c0d      	ldr	r4, [pc, #52]	@ (8003aa4 <__libc_init_array+0x3c>)
 8003a6e:	1b64      	subs	r4, r4, r5
 8003a70:	10a4      	asrs	r4, r4, #2
 8003a72:	2600      	movs	r6, #0
 8003a74:	42a6      	cmp	r6, r4
 8003a76:	d109      	bne.n	8003a8c <__libc_init_array+0x24>
 8003a78:	4d0b      	ldr	r5, [pc, #44]	@ (8003aa8 <__libc_init_array+0x40>)
 8003a7a:	4c0c      	ldr	r4, [pc, #48]	@ (8003aac <__libc_init_array+0x44>)
 8003a7c:	f000 fc66 	bl	800434c <_init>
 8003a80:	1b64      	subs	r4, r4, r5
 8003a82:	10a4      	asrs	r4, r4, #2
 8003a84:	2600      	movs	r6, #0
 8003a86:	42a6      	cmp	r6, r4
 8003a88:	d105      	bne.n	8003a96 <__libc_init_array+0x2e>
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
 8003a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a90:	4798      	blx	r3
 8003a92:	3601      	adds	r6, #1
 8003a94:	e7ee      	b.n	8003a74 <__libc_init_array+0xc>
 8003a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a9a:	4798      	blx	r3
 8003a9c:	3601      	adds	r6, #1
 8003a9e:	e7f2      	b.n	8003a86 <__libc_init_array+0x1e>
 8003aa0:	0800442c 	.word	0x0800442c
 8003aa4:	0800442c 	.word	0x0800442c
 8003aa8:	0800442c 	.word	0x0800442c
 8003aac:	08004430 	.word	0x08004430

08003ab0 <__retarget_lock_acquire_recursive>:
 8003ab0:	4770      	bx	lr

08003ab2 <__retarget_lock_release_recursive>:
 8003ab2:	4770      	bx	lr

08003ab4 <_free_r>:
 8003ab4:	b538      	push	{r3, r4, r5, lr}
 8003ab6:	4605      	mov	r5, r0
 8003ab8:	2900      	cmp	r1, #0
 8003aba:	d041      	beq.n	8003b40 <_free_r+0x8c>
 8003abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ac0:	1f0c      	subs	r4, r1, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	bfb8      	it	lt
 8003ac6:	18e4      	addlt	r4, r4, r3
 8003ac8:	f000 f8e0 	bl	8003c8c <__malloc_lock>
 8003acc:	4a1d      	ldr	r2, [pc, #116]	@ (8003b44 <_free_r+0x90>)
 8003ace:	6813      	ldr	r3, [r2, #0]
 8003ad0:	b933      	cbnz	r3, 8003ae0 <_free_r+0x2c>
 8003ad2:	6063      	str	r3, [r4, #4]
 8003ad4:	6014      	str	r4, [r2, #0]
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003adc:	f000 b8dc 	b.w	8003c98 <__malloc_unlock>
 8003ae0:	42a3      	cmp	r3, r4
 8003ae2:	d908      	bls.n	8003af6 <_free_r+0x42>
 8003ae4:	6820      	ldr	r0, [r4, #0]
 8003ae6:	1821      	adds	r1, r4, r0
 8003ae8:	428b      	cmp	r3, r1
 8003aea:	bf01      	itttt	eq
 8003aec:	6819      	ldreq	r1, [r3, #0]
 8003aee:	685b      	ldreq	r3, [r3, #4]
 8003af0:	1809      	addeq	r1, r1, r0
 8003af2:	6021      	streq	r1, [r4, #0]
 8003af4:	e7ed      	b.n	8003ad2 <_free_r+0x1e>
 8003af6:	461a      	mov	r2, r3
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	b10b      	cbz	r3, 8003b00 <_free_r+0x4c>
 8003afc:	42a3      	cmp	r3, r4
 8003afe:	d9fa      	bls.n	8003af6 <_free_r+0x42>
 8003b00:	6811      	ldr	r1, [r2, #0]
 8003b02:	1850      	adds	r0, r2, r1
 8003b04:	42a0      	cmp	r0, r4
 8003b06:	d10b      	bne.n	8003b20 <_free_r+0x6c>
 8003b08:	6820      	ldr	r0, [r4, #0]
 8003b0a:	4401      	add	r1, r0
 8003b0c:	1850      	adds	r0, r2, r1
 8003b0e:	4283      	cmp	r3, r0
 8003b10:	6011      	str	r1, [r2, #0]
 8003b12:	d1e0      	bne.n	8003ad6 <_free_r+0x22>
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	6053      	str	r3, [r2, #4]
 8003b1a:	4408      	add	r0, r1
 8003b1c:	6010      	str	r0, [r2, #0]
 8003b1e:	e7da      	b.n	8003ad6 <_free_r+0x22>
 8003b20:	d902      	bls.n	8003b28 <_free_r+0x74>
 8003b22:	230c      	movs	r3, #12
 8003b24:	602b      	str	r3, [r5, #0]
 8003b26:	e7d6      	b.n	8003ad6 <_free_r+0x22>
 8003b28:	6820      	ldr	r0, [r4, #0]
 8003b2a:	1821      	adds	r1, r4, r0
 8003b2c:	428b      	cmp	r3, r1
 8003b2e:	bf04      	itt	eq
 8003b30:	6819      	ldreq	r1, [r3, #0]
 8003b32:	685b      	ldreq	r3, [r3, #4]
 8003b34:	6063      	str	r3, [r4, #4]
 8003b36:	bf04      	itt	eq
 8003b38:	1809      	addeq	r1, r1, r0
 8003b3a:	6021      	streq	r1, [r4, #0]
 8003b3c:	6054      	str	r4, [r2, #4]
 8003b3e:	e7ca      	b.n	8003ad6 <_free_r+0x22>
 8003b40:	bd38      	pop	{r3, r4, r5, pc}
 8003b42:	bf00      	nop
 8003b44:	2000028c 	.word	0x2000028c

08003b48 <sbrk_aligned>:
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	4e0f      	ldr	r6, [pc, #60]	@ (8003b88 <sbrk_aligned+0x40>)
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	6831      	ldr	r1, [r6, #0]
 8003b50:	4605      	mov	r5, r0
 8003b52:	b911      	cbnz	r1, 8003b5a <sbrk_aligned+0x12>
 8003b54:	f000 fba6 	bl	80042a4 <_sbrk_r>
 8003b58:	6030      	str	r0, [r6, #0]
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	f000 fba1 	bl	80042a4 <_sbrk_r>
 8003b62:	1c43      	adds	r3, r0, #1
 8003b64:	d103      	bne.n	8003b6e <sbrk_aligned+0x26>
 8003b66:	f04f 34ff 	mov.w	r4, #4294967295
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
 8003b6e:	1cc4      	adds	r4, r0, #3
 8003b70:	f024 0403 	bic.w	r4, r4, #3
 8003b74:	42a0      	cmp	r0, r4
 8003b76:	d0f8      	beq.n	8003b6a <sbrk_aligned+0x22>
 8003b78:	1a21      	subs	r1, r4, r0
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f000 fb92 	bl	80042a4 <_sbrk_r>
 8003b80:	3001      	adds	r0, #1
 8003b82:	d1f2      	bne.n	8003b6a <sbrk_aligned+0x22>
 8003b84:	e7ef      	b.n	8003b66 <sbrk_aligned+0x1e>
 8003b86:	bf00      	nop
 8003b88:	20000288 	.word	0x20000288

08003b8c <_malloc_r>:
 8003b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b90:	1ccd      	adds	r5, r1, #3
 8003b92:	f025 0503 	bic.w	r5, r5, #3
 8003b96:	3508      	adds	r5, #8
 8003b98:	2d0c      	cmp	r5, #12
 8003b9a:	bf38      	it	cc
 8003b9c:	250c      	movcc	r5, #12
 8003b9e:	2d00      	cmp	r5, #0
 8003ba0:	4606      	mov	r6, r0
 8003ba2:	db01      	blt.n	8003ba8 <_malloc_r+0x1c>
 8003ba4:	42a9      	cmp	r1, r5
 8003ba6:	d904      	bls.n	8003bb2 <_malloc_r+0x26>
 8003ba8:	230c      	movs	r3, #12
 8003baa:	6033      	str	r3, [r6, #0]
 8003bac:	2000      	movs	r0, #0
 8003bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c88 <_malloc_r+0xfc>
 8003bb6:	f000 f869 	bl	8003c8c <__malloc_lock>
 8003bba:	f8d8 3000 	ldr.w	r3, [r8]
 8003bbe:	461c      	mov	r4, r3
 8003bc0:	bb44      	cbnz	r4, 8003c14 <_malloc_r+0x88>
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	f7ff ffbf 	bl	8003b48 <sbrk_aligned>
 8003bca:	1c43      	adds	r3, r0, #1
 8003bcc:	4604      	mov	r4, r0
 8003bce:	d158      	bne.n	8003c82 <_malloc_r+0xf6>
 8003bd0:	f8d8 4000 	ldr.w	r4, [r8]
 8003bd4:	4627      	mov	r7, r4
 8003bd6:	2f00      	cmp	r7, #0
 8003bd8:	d143      	bne.n	8003c62 <_malloc_r+0xd6>
 8003bda:	2c00      	cmp	r4, #0
 8003bdc:	d04b      	beq.n	8003c76 <_malloc_r+0xea>
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	4639      	mov	r1, r7
 8003be2:	4630      	mov	r0, r6
 8003be4:	eb04 0903 	add.w	r9, r4, r3
 8003be8:	f000 fb5c 	bl	80042a4 <_sbrk_r>
 8003bec:	4581      	cmp	r9, r0
 8003bee:	d142      	bne.n	8003c76 <_malloc_r+0xea>
 8003bf0:	6821      	ldr	r1, [r4, #0]
 8003bf2:	1a6d      	subs	r5, r5, r1
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f7ff ffa6 	bl	8003b48 <sbrk_aligned>
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	d03a      	beq.n	8003c76 <_malloc_r+0xea>
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	442b      	add	r3, r5
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	f8d8 3000 	ldr.w	r3, [r8]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	bb62      	cbnz	r2, 8003c68 <_malloc_r+0xdc>
 8003c0e:	f8c8 7000 	str.w	r7, [r8]
 8003c12:	e00f      	b.n	8003c34 <_malloc_r+0xa8>
 8003c14:	6822      	ldr	r2, [r4, #0]
 8003c16:	1b52      	subs	r2, r2, r5
 8003c18:	d420      	bmi.n	8003c5c <_malloc_r+0xd0>
 8003c1a:	2a0b      	cmp	r2, #11
 8003c1c:	d917      	bls.n	8003c4e <_malloc_r+0xc2>
 8003c1e:	1961      	adds	r1, r4, r5
 8003c20:	42a3      	cmp	r3, r4
 8003c22:	6025      	str	r5, [r4, #0]
 8003c24:	bf18      	it	ne
 8003c26:	6059      	strne	r1, [r3, #4]
 8003c28:	6863      	ldr	r3, [r4, #4]
 8003c2a:	bf08      	it	eq
 8003c2c:	f8c8 1000 	streq.w	r1, [r8]
 8003c30:	5162      	str	r2, [r4, r5]
 8003c32:	604b      	str	r3, [r1, #4]
 8003c34:	4630      	mov	r0, r6
 8003c36:	f000 f82f 	bl	8003c98 <__malloc_unlock>
 8003c3a:	f104 000b 	add.w	r0, r4, #11
 8003c3e:	1d23      	adds	r3, r4, #4
 8003c40:	f020 0007 	bic.w	r0, r0, #7
 8003c44:	1ac2      	subs	r2, r0, r3
 8003c46:	bf1c      	itt	ne
 8003c48:	1a1b      	subne	r3, r3, r0
 8003c4a:	50a3      	strne	r3, [r4, r2]
 8003c4c:	e7af      	b.n	8003bae <_malloc_r+0x22>
 8003c4e:	6862      	ldr	r2, [r4, #4]
 8003c50:	42a3      	cmp	r3, r4
 8003c52:	bf0c      	ite	eq
 8003c54:	f8c8 2000 	streq.w	r2, [r8]
 8003c58:	605a      	strne	r2, [r3, #4]
 8003c5a:	e7eb      	b.n	8003c34 <_malloc_r+0xa8>
 8003c5c:	4623      	mov	r3, r4
 8003c5e:	6864      	ldr	r4, [r4, #4]
 8003c60:	e7ae      	b.n	8003bc0 <_malloc_r+0x34>
 8003c62:	463c      	mov	r4, r7
 8003c64:	687f      	ldr	r7, [r7, #4]
 8003c66:	e7b6      	b.n	8003bd6 <_malloc_r+0x4a>
 8003c68:	461a      	mov	r2, r3
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	42a3      	cmp	r3, r4
 8003c6e:	d1fb      	bne.n	8003c68 <_malloc_r+0xdc>
 8003c70:	2300      	movs	r3, #0
 8003c72:	6053      	str	r3, [r2, #4]
 8003c74:	e7de      	b.n	8003c34 <_malloc_r+0xa8>
 8003c76:	230c      	movs	r3, #12
 8003c78:	6033      	str	r3, [r6, #0]
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	f000 f80c 	bl	8003c98 <__malloc_unlock>
 8003c80:	e794      	b.n	8003bac <_malloc_r+0x20>
 8003c82:	6005      	str	r5, [r0, #0]
 8003c84:	e7d6      	b.n	8003c34 <_malloc_r+0xa8>
 8003c86:	bf00      	nop
 8003c88:	2000028c 	.word	0x2000028c

08003c8c <__malloc_lock>:
 8003c8c:	4801      	ldr	r0, [pc, #4]	@ (8003c94 <__malloc_lock+0x8>)
 8003c8e:	f7ff bf0f 	b.w	8003ab0 <__retarget_lock_acquire_recursive>
 8003c92:	bf00      	nop
 8003c94:	20000284 	.word	0x20000284

08003c98 <__malloc_unlock>:
 8003c98:	4801      	ldr	r0, [pc, #4]	@ (8003ca0 <__malloc_unlock+0x8>)
 8003c9a:	f7ff bf0a 	b.w	8003ab2 <__retarget_lock_release_recursive>
 8003c9e:	bf00      	nop
 8003ca0:	20000284 	.word	0x20000284

08003ca4 <__ssputs_r>:
 8003ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca8:	688e      	ldr	r6, [r1, #8]
 8003caa:	461f      	mov	r7, r3
 8003cac:	42be      	cmp	r6, r7
 8003cae:	680b      	ldr	r3, [r1, #0]
 8003cb0:	4682      	mov	sl, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	4690      	mov	r8, r2
 8003cb6:	d82d      	bhi.n	8003d14 <__ssputs_r+0x70>
 8003cb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003cbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003cc0:	d026      	beq.n	8003d10 <__ssputs_r+0x6c>
 8003cc2:	6965      	ldr	r5, [r4, #20]
 8003cc4:	6909      	ldr	r1, [r1, #16]
 8003cc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cca:	eba3 0901 	sub.w	r9, r3, r1
 8003cce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cd2:	1c7b      	adds	r3, r7, #1
 8003cd4:	444b      	add	r3, r9
 8003cd6:	106d      	asrs	r5, r5, #1
 8003cd8:	429d      	cmp	r5, r3
 8003cda:	bf38      	it	cc
 8003cdc:	461d      	movcc	r5, r3
 8003cde:	0553      	lsls	r3, r2, #21
 8003ce0:	d527      	bpl.n	8003d32 <__ssputs_r+0x8e>
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	f7ff ff52 	bl	8003b8c <_malloc_r>
 8003ce8:	4606      	mov	r6, r0
 8003cea:	b360      	cbz	r0, 8003d46 <__ssputs_r+0xa2>
 8003cec:	6921      	ldr	r1, [r4, #16]
 8003cee:	464a      	mov	r2, r9
 8003cf0:	f000 fae8 	bl	80042c4 <memcpy>
 8003cf4:	89a3      	ldrh	r3, [r4, #12]
 8003cf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cfe:	81a3      	strh	r3, [r4, #12]
 8003d00:	6126      	str	r6, [r4, #16]
 8003d02:	6165      	str	r5, [r4, #20]
 8003d04:	444e      	add	r6, r9
 8003d06:	eba5 0509 	sub.w	r5, r5, r9
 8003d0a:	6026      	str	r6, [r4, #0]
 8003d0c:	60a5      	str	r5, [r4, #8]
 8003d0e:	463e      	mov	r6, r7
 8003d10:	42be      	cmp	r6, r7
 8003d12:	d900      	bls.n	8003d16 <__ssputs_r+0x72>
 8003d14:	463e      	mov	r6, r7
 8003d16:	6820      	ldr	r0, [r4, #0]
 8003d18:	4632      	mov	r2, r6
 8003d1a:	4641      	mov	r1, r8
 8003d1c:	f000 faa8 	bl	8004270 <memmove>
 8003d20:	68a3      	ldr	r3, [r4, #8]
 8003d22:	1b9b      	subs	r3, r3, r6
 8003d24:	60a3      	str	r3, [r4, #8]
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	4433      	add	r3, r6
 8003d2a:	6023      	str	r3, [r4, #0]
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d32:	462a      	mov	r2, r5
 8003d34:	f000 fad4 	bl	80042e0 <_realloc_r>
 8003d38:	4606      	mov	r6, r0
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d1e0      	bne.n	8003d00 <__ssputs_r+0x5c>
 8003d3e:	6921      	ldr	r1, [r4, #16]
 8003d40:	4650      	mov	r0, sl
 8003d42:	f7ff feb7 	bl	8003ab4 <_free_r>
 8003d46:	230c      	movs	r3, #12
 8003d48:	f8ca 3000 	str.w	r3, [sl]
 8003d4c:	89a3      	ldrh	r3, [r4, #12]
 8003d4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d52:	81a3      	strh	r3, [r4, #12]
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295
 8003d58:	e7e9      	b.n	8003d2e <__ssputs_r+0x8a>
	...

08003d5c <_svfiprintf_r>:
 8003d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d60:	4698      	mov	r8, r3
 8003d62:	898b      	ldrh	r3, [r1, #12]
 8003d64:	061b      	lsls	r3, r3, #24
 8003d66:	b09d      	sub	sp, #116	@ 0x74
 8003d68:	4607      	mov	r7, r0
 8003d6a:	460d      	mov	r5, r1
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	d510      	bpl.n	8003d92 <_svfiprintf_r+0x36>
 8003d70:	690b      	ldr	r3, [r1, #16]
 8003d72:	b973      	cbnz	r3, 8003d92 <_svfiprintf_r+0x36>
 8003d74:	2140      	movs	r1, #64	@ 0x40
 8003d76:	f7ff ff09 	bl	8003b8c <_malloc_r>
 8003d7a:	6028      	str	r0, [r5, #0]
 8003d7c:	6128      	str	r0, [r5, #16]
 8003d7e:	b930      	cbnz	r0, 8003d8e <_svfiprintf_r+0x32>
 8003d80:	230c      	movs	r3, #12
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	f04f 30ff 	mov.w	r0, #4294967295
 8003d88:	b01d      	add	sp, #116	@ 0x74
 8003d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d8e:	2340      	movs	r3, #64	@ 0x40
 8003d90:	616b      	str	r3, [r5, #20]
 8003d92:	2300      	movs	r3, #0
 8003d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d96:	2320      	movs	r3, #32
 8003d98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003da0:	2330      	movs	r3, #48	@ 0x30
 8003da2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003f40 <_svfiprintf_r+0x1e4>
 8003da6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003daa:	f04f 0901 	mov.w	r9, #1
 8003dae:	4623      	mov	r3, r4
 8003db0:	469a      	mov	sl, r3
 8003db2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003db6:	b10a      	cbz	r2, 8003dbc <_svfiprintf_r+0x60>
 8003db8:	2a25      	cmp	r2, #37	@ 0x25
 8003dba:	d1f9      	bne.n	8003db0 <_svfiprintf_r+0x54>
 8003dbc:	ebba 0b04 	subs.w	fp, sl, r4
 8003dc0:	d00b      	beq.n	8003dda <_svfiprintf_r+0x7e>
 8003dc2:	465b      	mov	r3, fp
 8003dc4:	4622      	mov	r2, r4
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	4638      	mov	r0, r7
 8003dca:	f7ff ff6b 	bl	8003ca4 <__ssputs_r>
 8003dce:	3001      	adds	r0, #1
 8003dd0:	f000 80a7 	beq.w	8003f22 <_svfiprintf_r+0x1c6>
 8003dd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003dd6:	445a      	add	r2, fp
 8003dd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003dda:	f89a 3000 	ldrb.w	r3, [sl]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 809f 	beq.w	8003f22 <_svfiprintf_r+0x1c6>
 8003de4:	2300      	movs	r3, #0
 8003de6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dee:	f10a 0a01 	add.w	sl, sl, #1
 8003df2:	9304      	str	r3, [sp, #16]
 8003df4:	9307      	str	r3, [sp, #28]
 8003df6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003dfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8003dfc:	4654      	mov	r4, sl
 8003dfe:	2205      	movs	r2, #5
 8003e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e04:	484e      	ldr	r0, [pc, #312]	@ (8003f40 <_svfiprintf_r+0x1e4>)
 8003e06:	f7fc f9eb 	bl	80001e0 <memchr>
 8003e0a:	9a04      	ldr	r2, [sp, #16]
 8003e0c:	b9d8      	cbnz	r0, 8003e46 <_svfiprintf_r+0xea>
 8003e0e:	06d0      	lsls	r0, r2, #27
 8003e10:	bf44      	itt	mi
 8003e12:	2320      	movmi	r3, #32
 8003e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e18:	0711      	lsls	r1, r2, #28
 8003e1a:	bf44      	itt	mi
 8003e1c:	232b      	movmi	r3, #43	@ 0x2b
 8003e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e22:	f89a 3000 	ldrb.w	r3, [sl]
 8003e26:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e28:	d015      	beq.n	8003e56 <_svfiprintf_r+0xfa>
 8003e2a:	9a07      	ldr	r2, [sp, #28]
 8003e2c:	4654      	mov	r4, sl
 8003e2e:	2000      	movs	r0, #0
 8003e30:	f04f 0c0a 	mov.w	ip, #10
 8003e34:	4621      	mov	r1, r4
 8003e36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e3a:	3b30      	subs	r3, #48	@ 0x30
 8003e3c:	2b09      	cmp	r3, #9
 8003e3e:	d94b      	bls.n	8003ed8 <_svfiprintf_r+0x17c>
 8003e40:	b1b0      	cbz	r0, 8003e70 <_svfiprintf_r+0x114>
 8003e42:	9207      	str	r2, [sp, #28]
 8003e44:	e014      	b.n	8003e70 <_svfiprintf_r+0x114>
 8003e46:	eba0 0308 	sub.w	r3, r0, r8
 8003e4a:	fa09 f303 	lsl.w	r3, r9, r3
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	9304      	str	r3, [sp, #16]
 8003e52:	46a2      	mov	sl, r4
 8003e54:	e7d2      	b.n	8003dfc <_svfiprintf_r+0xa0>
 8003e56:	9b03      	ldr	r3, [sp, #12]
 8003e58:	1d19      	adds	r1, r3, #4
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	9103      	str	r1, [sp, #12]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bfbb      	ittet	lt
 8003e62:	425b      	neglt	r3, r3
 8003e64:	f042 0202 	orrlt.w	r2, r2, #2
 8003e68:	9307      	strge	r3, [sp, #28]
 8003e6a:	9307      	strlt	r3, [sp, #28]
 8003e6c:	bfb8      	it	lt
 8003e6e:	9204      	strlt	r2, [sp, #16]
 8003e70:	7823      	ldrb	r3, [r4, #0]
 8003e72:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e74:	d10a      	bne.n	8003e8c <_svfiprintf_r+0x130>
 8003e76:	7863      	ldrb	r3, [r4, #1]
 8003e78:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e7a:	d132      	bne.n	8003ee2 <_svfiprintf_r+0x186>
 8003e7c:	9b03      	ldr	r3, [sp, #12]
 8003e7e:	1d1a      	adds	r2, r3, #4
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	9203      	str	r2, [sp, #12]
 8003e84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e88:	3402      	adds	r4, #2
 8003e8a:	9305      	str	r3, [sp, #20]
 8003e8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f50 <_svfiprintf_r+0x1f4>
 8003e90:	7821      	ldrb	r1, [r4, #0]
 8003e92:	2203      	movs	r2, #3
 8003e94:	4650      	mov	r0, sl
 8003e96:	f7fc f9a3 	bl	80001e0 <memchr>
 8003e9a:	b138      	cbz	r0, 8003eac <_svfiprintf_r+0x150>
 8003e9c:	9b04      	ldr	r3, [sp, #16]
 8003e9e:	eba0 000a 	sub.w	r0, r0, sl
 8003ea2:	2240      	movs	r2, #64	@ 0x40
 8003ea4:	4082      	lsls	r2, r0
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	3401      	adds	r4, #1
 8003eaa:	9304      	str	r3, [sp, #16]
 8003eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eb0:	4824      	ldr	r0, [pc, #144]	@ (8003f44 <_svfiprintf_r+0x1e8>)
 8003eb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003eb6:	2206      	movs	r2, #6
 8003eb8:	f7fc f992 	bl	80001e0 <memchr>
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d036      	beq.n	8003f2e <_svfiprintf_r+0x1d2>
 8003ec0:	4b21      	ldr	r3, [pc, #132]	@ (8003f48 <_svfiprintf_r+0x1ec>)
 8003ec2:	bb1b      	cbnz	r3, 8003f0c <_svfiprintf_r+0x1b0>
 8003ec4:	9b03      	ldr	r3, [sp, #12]
 8003ec6:	3307      	adds	r3, #7
 8003ec8:	f023 0307 	bic.w	r3, r3, #7
 8003ecc:	3308      	adds	r3, #8
 8003ece:	9303      	str	r3, [sp, #12]
 8003ed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ed2:	4433      	add	r3, r6
 8003ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ed6:	e76a      	b.n	8003dae <_svfiprintf_r+0x52>
 8003ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003edc:	460c      	mov	r4, r1
 8003ede:	2001      	movs	r0, #1
 8003ee0:	e7a8      	b.n	8003e34 <_svfiprintf_r+0xd8>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	3401      	adds	r4, #1
 8003ee6:	9305      	str	r3, [sp, #20]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	f04f 0c0a 	mov.w	ip, #10
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ef4:	3a30      	subs	r2, #48	@ 0x30
 8003ef6:	2a09      	cmp	r2, #9
 8003ef8:	d903      	bls.n	8003f02 <_svfiprintf_r+0x1a6>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0c6      	beq.n	8003e8c <_svfiprintf_r+0x130>
 8003efe:	9105      	str	r1, [sp, #20]
 8003f00:	e7c4      	b.n	8003e8c <_svfiprintf_r+0x130>
 8003f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f06:	4604      	mov	r4, r0
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e7f0      	b.n	8003eee <_svfiprintf_r+0x192>
 8003f0c:	ab03      	add	r3, sp, #12
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	462a      	mov	r2, r5
 8003f12:	4b0e      	ldr	r3, [pc, #56]	@ (8003f4c <_svfiprintf_r+0x1f0>)
 8003f14:	a904      	add	r1, sp, #16
 8003f16:	4638      	mov	r0, r7
 8003f18:	f3af 8000 	nop.w
 8003f1c:	1c42      	adds	r2, r0, #1
 8003f1e:	4606      	mov	r6, r0
 8003f20:	d1d6      	bne.n	8003ed0 <_svfiprintf_r+0x174>
 8003f22:	89ab      	ldrh	r3, [r5, #12]
 8003f24:	065b      	lsls	r3, r3, #25
 8003f26:	f53f af2d 	bmi.w	8003d84 <_svfiprintf_r+0x28>
 8003f2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f2c:	e72c      	b.n	8003d88 <_svfiprintf_r+0x2c>
 8003f2e:	ab03      	add	r3, sp, #12
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	462a      	mov	r2, r5
 8003f34:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <_svfiprintf_r+0x1f0>)
 8003f36:	a904      	add	r1, sp, #16
 8003f38:	4638      	mov	r0, r7
 8003f3a:	f000 f879 	bl	8004030 <_printf_i>
 8003f3e:	e7ed      	b.n	8003f1c <_svfiprintf_r+0x1c0>
 8003f40:	080043f0 	.word	0x080043f0
 8003f44:	080043fa 	.word	0x080043fa
 8003f48:	00000000 	.word	0x00000000
 8003f4c:	08003ca5 	.word	0x08003ca5
 8003f50:	080043f6 	.word	0x080043f6

08003f54 <_printf_common>:
 8003f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f58:	4616      	mov	r6, r2
 8003f5a:	4698      	mov	r8, r3
 8003f5c:	688a      	ldr	r2, [r1, #8]
 8003f5e:	690b      	ldr	r3, [r1, #16]
 8003f60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f64:	4293      	cmp	r3, r2
 8003f66:	bfb8      	it	lt
 8003f68:	4613      	movlt	r3, r2
 8003f6a:	6033      	str	r3, [r6, #0]
 8003f6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f70:	4607      	mov	r7, r0
 8003f72:	460c      	mov	r4, r1
 8003f74:	b10a      	cbz	r2, 8003f7a <_printf_common+0x26>
 8003f76:	3301      	adds	r3, #1
 8003f78:	6033      	str	r3, [r6, #0]
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	0699      	lsls	r1, r3, #26
 8003f7e:	bf42      	ittt	mi
 8003f80:	6833      	ldrmi	r3, [r6, #0]
 8003f82:	3302      	addmi	r3, #2
 8003f84:	6033      	strmi	r3, [r6, #0]
 8003f86:	6825      	ldr	r5, [r4, #0]
 8003f88:	f015 0506 	ands.w	r5, r5, #6
 8003f8c:	d106      	bne.n	8003f9c <_printf_common+0x48>
 8003f8e:	f104 0a19 	add.w	sl, r4, #25
 8003f92:	68e3      	ldr	r3, [r4, #12]
 8003f94:	6832      	ldr	r2, [r6, #0]
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	42ab      	cmp	r3, r5
 8003f9a:	dc26      	bgt.n	8003fea <_printf_common+0x96>
 8003f9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fa0:	6822      	ldr	r2, [r4, #0]
 8003fa2:	3b00      	subs	r3, #0
 8003fa4:	bf18      	it	ne
 8003fa6:	2301      	movne	r3, #1
 8003fa8:	0692      	lsls	r2, r2, #26
 8003faa:	d42b      	bmi.n	8004004 <_printf_common+0xb0>
 8003fac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fb0:	4641      	mov	r1, r8
 8003fb2:	4638      	mov	r0, r7
 8003fb4:	47c8      	blx	r9
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	d01e      	beq.n	8003ff8 <_printf_common+0xa4>
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	6922      	ldr	r2, [r4, #16]
 8003fbe:	f003 0306 	and.w	r3, r3, #6
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	bf02      	ittt	eq
 8003fc6:	68e5      	ldreq	r5, [r4, #12]
 8003fc8:	6833      	ldreq	r3, [r6, #0]
 8003fca:	1aed      	subeq	r5, r5, r3
 8003fcc:	68a3      	ldr	r3, [r4, #8]
 8003fce:	bf0c      	ite	eq
 8003fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fd4:	2500      	movne	r5, #0
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	bfc4      	itt	gt
 8003fda:	1a9b      	subgt	r3, r3, r2
 8003fdc:	18ed      	addgt	r5, r5, r3
 8003fde:	2600      	movs	r6, #0
 8003fe0:	341a      	adds	r4, #26
 8003fe2:	42b5      	cmp	r5, r6
 8003fe4:	d11a      	bne.n	800401c <_printf_common+0xc8>
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	e008      	b.n	8003ffc <_printf_common+0xa8>
 8003fea:	2301      	movs	r3, #1
 8003fec:	4652      	mov	r2, sl
 8003fee:	4641      	mov	r1, r8
 8003ff0:	4638      	mov	r0, r7
 8003ff2:	47c8      	blx	r9
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	d103      	bne.n	8004000 <_printf_common+0xac>
 8003ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004000:	3501      	adds	r5, #1
 8004002:	e7c6      	b.n	8003f92 <_printf_common+0x3e>
 8004004:	18e1      	adds	r1, r4, r3
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	2030      	movs	r0, #48	@ 0x30
 800400a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800400e:	4422      	add	r2, r4
 8004010:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004014:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004018:	3302      	adds	r3, #2
 800401a:	e7c7      	b.n	8003fac <_printf_common+0x58>
 800401c:	2301      	movs	r3, #1
 800401e:	4622      	mov	r2, r4
 8004020:	4641      	mov	r1, r8
 8004022:	4638      	mov	r0, r7
 8004024:	47c8      	blx	r9
 8004026:	3001      	adds	r0, #1
 8004028:	d0e6      	beq.n	8003ff8 <_printf_common+0xa4>
 800402a:	3601      	adds	r6, #1
 800402c:	e7d9      	b.n	8003fe2 <_printf_common+0x8e>
	...

08004030 <_printf_i>:
 8004030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004034:	7e0f      	ldrb	r7, [r1, #24]
 8004036:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004038:	2f78      	cmp	r7, #120	@ 0x78
 800403a:	4691      	mov	r9, r2
 800403c:	4680      	mov	r8, r0
 800403e:	460c      	mov	r4, r1
 8004040:	469a      	mov	sl, r3
 8004042:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004046:	d807      	bhi.n	8004058 <_printf_i+0x28>
 8004048:	2f62      	cmp	r7, #98	@ 0x62
 800404a:	d80a      	bhi.n	8004062 <_printf_i+0x32>
 800404c:	2f00      	cmp	r7, #0
 800404e:	f000 80d2 	beq.w	80041f6 <_printf_i+0x1c6>
 8004052:	2f58      	cmp	r7, #88	@ 0x58
 8004054:	f000 80b9 	beq.w	80041ca <_printf_i+0x19a>
 8004058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800405c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004060:	e03a      	b.n	80040d8 <_printf_i+0xa8>
 8004062:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004066:	2b15      	cmp	r3, #21
 8004068:	d8f6      	bhi.n	8004058 <_printf_i+0x28>
 800406a:	a101      	add	r1, pc, #4	@ (adr r1, 8004070 <_printf_i+0x40>)
 800406c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004070:	080040c9 	.word	0x080040c9
 8004074:	080040dd 	.word	0x080040dd
 8004078:	08004059 	.word	0x08004059
 800407c:	08004059 	.word	0x08004059
 8004080:	08004059 	.word	0x08004059
 8004084:	08004059 	.word	0x08004059
 8004088:	080040dd 	.word	0x080040dd
 800408c:	08004059 	.word	0x08004059
 8004090:	08004059 	.word	0x08004059
 8004094:	08004059 	.word	0x08004059
 8004098:	08004059 	.word	0x08004059
 800409c:	080041dd 	.word	0x080041dd
 80040a0:	08004107 	.word	0x08004107
 80040a4:	08004197 	.word	0x08004197
 80040a8:	08004059 	.word	0x08004059
 80040ac:	08004059 	.word	0x08004059
 80040b0:	080041ff 	.word	0x080041ff
 80040b4:	08004059 	.word	0x08004059
 80040b8:	08004107 	.word	0x08004107
 80040bc:	08004059 	.word	0x08004059
 80040c0:	08004059 	.word	0x08004059
 80040c4:	0800419f 	.word	0x0800419f
 80040c8:	6833      	ldr	r3, [r6, #0]
 80040ca:	1d1a      	adds	r2, r3, #4
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6032      	str	r2, [r6, #0]
 80040d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80040d8:	2301      	movs	r3, #1
 80040da:	e09d      	b.n	8004218 <_printf_i+0x1e8>
 80040dc:	6833      	ldr	r3, [r6, #0]
 80040de:	6820      	ldr	r0, [r4, #0]
 80040e0:	1d19      	adds	r1, r3, #4
 80040e2:	6031      	str	r1, [r6, #0]
 80040e4:	0606      	lsls	r6, r0, #24
 80040e6:	d501      	bpl.n	80040ec <_printf_i+0xbc>
 80040e8:	681d      	ldr	r5, [r3, #0]
 80040ea:	e003      	b.n	80040f4 <_printf_i+0xc4>
 80040ec:	0645      	lsls	r5, r0, #25
 80040ee:	d5fb      	bpl.n	80040e8 <_printf_i+0xb8>
 80040f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040f4:	2d00      	cmp	r5, #0
 80040f6:	da03      	bge.n	8004100 <_printf_i+0xd0>
 80040f8:	232d      	movs	r3, #45	@ 0x2d
 80040fa:	426d      	negs	r5, r5
 80040fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004100:	4859      	ldr	r0, [pc, #356]	@ (8004268 <_printf_i+0x238>)
 8004102:	230a      	movs	r3, #10
 8004104:	e011      	b.n	800412a <_printf_i+0xfa>
 8004106:	6821      	ldr	r1, [r4, #0]
 8004108:	6833      	ldr	r3, [r6, #0]
 800410a:	0608      	lsls	r0, r1, #24
 800410c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004110:	d402      	bmi.n	8004118 <_printf_i+0xe8>
 8004112:	0649      	lsls	r1, r1, #25
 8004114:	bf48      	it	mi
 8004116:	b2ad      	uxthmi	r5, r5
 8004118:	2f6f      	cmp	r7, #111	@ 0x6f
 800411a:	4853      	ldr	r0, [pc, #332]	@ (8004268 <_printf_i+0x238>)
 800411c:	6033      	str	r3, [r6, #0]
 800411e:	bf14      	ite	ne
 8004120:	230a      	movne	r3, #10
 8004122:	2308      	moveq	r3, #8
 8004124:	2100      	movs	r1, #0
 8004126:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800412a:	6866      	ldr	r6, [r4, #4]
 800412c:	60a6      	str	r6, [r4, #8]
 800412e:	2e00      	cmp	r6, #0
 8004130:	bfa2      	ittt	ge
 8004132:	6821      	ldrge	r1, [r4, #0]
 8004134:	f021 0104 	bicge.w	r1, r1, #4
 8004138:	6021      	strge	r1, [r4, #0]
 800413a:	b90d      	cbnz	r5, 8004140 <_printf_i+0x110>
 800413c:	2e00      	cmp	r6, #0
 800413e:	d04b      	beq.n	80041d8 <_printf_i+0x1a8>
 8004140:	4616      	mov	r6, r2
 8004142:	fbb5 f1f3 	udiv	r1, r5, r3
 8004146:	fb03 5711 	mls	r7, r3, r1, r5
 800414a:	5dc7      	ldrb	r7, [r0, r7]
 800414c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004150:	462f      	mov	r7, r5
 8004152:	42bb      	cmp	r3, r7
 8004154:	460d      	mov	r5, r1
 8004156:	d9f4      	bls.n	8004142 <_printf_i+0x112>
 8004158:	2b08      	cmp	r3, #8
 800415a:	d10b      	bne.n	8004174 <_printf_i+0x144>
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	07df      	lsls	r7, r3, #31
 8004160:	d508      	bpl.n	8004174 <_printf_i+0x144>
 8004162:	6923      	ldr	r3, [r4, #16]
 8004164:	6861      	ldr	r1, [r4, #4]
 8004166:	4299      	cmp	r1, r3
 8004168:	bfde      	ittt	le
 800416a:	2330      	movle	r3, #48	@ 0x30
 800416c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004170:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004174:	1b92      	subs	r2, r2, r6
 8004176:	6122      	str	r2, [r4, #16]
 8004178:	f8cd a000 	str.w	sl, [sp]
 800417c:	464b      	mov	r3, r9
 800417e:	aa03      	add	r2, sp, #12
 8004180:	4621      	mov	r1, r4
 8004182:	4640      	mov	r0, r8
 8004184:	f7ff fee6 	bl	8003f54 <_printf_common>
 8004188:	3001      	adds	r0, #1
 800418a:	d14a      	bne.n	8004222 <_printf_i+0x1f2>
 800418c:	f04f 30ff 	mov.w	r0, #4294967295
 8004190:	b004      	add	sp, #16
 8004192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	f043 0320 	orr.w	r3, r3, #32
 800419c:	6023      	str	r3, [r4, #0]
 800419e:	4833      	ldr	r0, [pc, #204]	@ (800426c <_printf_i+0x23c>)
 80041a0:	2778      	movs	r7, #120	@ 0x78
 80041a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	6831      	ldr	r1, [r6, #0]
 80041aa:	061f      	lsls	r7, r3, #24
 80041ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80041b0:	d402      	bmi.n	80041b8 <_printf_i+0x188>
 80041b2:	065f      	lsls	r7, r3, #25
 80041b4:	bf48      	it	mi
 80041b6:	b2ad      	uxthmi	r5, r5
 80041b8:	6031      	str	r1, [r6, #0]
 80041ba:	07d9      	lsls	r1, r3, #31
 80041bc:	bf44      	itt	mi
 80041be:	f043 0320 	orrmi.w	r3, r3, #32
 80041c2:	6023      	strmi	r3, [r4, #0]
 80041c4:	b11d      	cbz	r5, 80041ce <_printf_i+0x19e>
 80041c6:	2310      	movs	r3, #16
 80041c8:	e7ac      	b.n	8004124 <_printf_i+0xf4>
 80041ca:	4827      	ldr	r0, [pc, #156]	@ (8004268 <_printf_i+0x238>)
 80041cc:	e7e9      	b.n	80041a2 <_printf_i+0x172>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	f023 0320 	bic.w	r3, r3, #32
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	e7f6      	b.n	80041c6 <_printf_i+0x196>
 80041d8:	4616      	mov	r6, r2
 80041da:	e7bd      	b.n	8004158 <_printf_i+0x128>
 80041dc:	6833      	ldr	r3, [r6, #0]
 80041de:	6825      	ldr	r5, [r4, #0]
 80041e0:	6961      	ldr	r1, [r4, #20]
 80041e2:	1d18      	adds	r0, r3, #4
 80041e4:	6030      	str	r0, [r6, #0]
 80041e6:	062e      	lsls	r6, r5, #24
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	d501      	bpl.n	80041f0 <_printf_i+0x1c0>
 80041ec:	6019      	str	r1, [r3, #0]
 80041ee:	e002      	b.n	80041f6 <_printf_i+0x1c6>
 80041f0:	0668      	lsls	r0, r5, #25
 80041f2:	d5fb      	bpl.n	80041ec <_printf_i+0x1bc>
 80041f4:	8019      	strh	r1, [r3, #0]
 80041f6:	2300      	movs	r3, #0
 80041f8:	6123      	str	r3, [r4, #16]
 80041fa:	4616      	mov	r6, r2
 80041fc:	e7bc      	b.n	8004178 <_printf_i+0x148>
 80041fe:	6833      	ldr	r3, [r6, #0]
 8004200:	1d1a      	adds	r2, r3, #4
 8004202:	6032      	str	r2, [r6, #0]
 8004204:	681e      	ldr	r6, [r3, #0]
 8004206:	6862      	ldr	r2, [r4, #4]
 8004208:	2100      	movs	r1, #0
 800420a:	4630      	mov	r0, r6
 800420c:	f7fb ffe8 	bl	80001e0 <memchr>
 8004210:	b108      	cbz	r0, 8004216 <_printf_i+0x1e6>
 8004212:	1b80      	subs	r0, r0, r6
 8004214:	6060      	str	r0, [r4, #4]
 8004216:	6863      	ldr	r3, [r4, #4]
 8004218:	6123      	str	r3, [r4, #16]
 800421a:	2300      	movs	r3, #0
 800421c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004220:	e7aa      	b.n	8004178 <_printf_i+0x148>
 8004222:	6923      	ldr	r3, [r4, #16]
 8004224:	4632      	mov	r2, r6
 8004226:	4649      	mov	r1, r9
 8004228:	4640      	mov	r0, r8
 800422a:	47d0      	blx	sl
 800422c:	3001      	adds	r0, #1
 800422e:	d0ad      	beq.n	800418c <_printf_i+0x15c>
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	079b      	lsls	r3, r3, #30
 8004234:	d413      	bmi.n	800425e <_printf_i+0x22e>
 8004236:	68e0      	ldr	r0, [r4, #12]
 8004238:	9b03      	ldr	r3, [sp, #12]
 800423a:	4298      	cmp	r0, r3
 800423c:	bfb8      	it	lt
 800423e:	4618      	movlt	r0, r3
 8004240:	e7a6      	b.n	8004190 <_printf_i+0x160>
 8004242:	2301      	movs	r3, #1
 8004244:	4632      	mov	r2, r6
 8004246:	4649      	mov	r1, r9
 8004248:	4640      	mov	r0, r8
 800424a:	47d0      	blx	sl
 800424c:	3001      	adds	r0, #1
 800424e:	d09d      	beq.n	800418c <_printf_i+0x15c>
 8004250:	3501      	adds	r5, #1
 8004252:	68e3      	ldr	r3, [r4, #12]
 8004254:	9903      	ldr	r1, [sp, #12]
 8004256:	1a5b      	subs	r3, r3, r1
 8004258:	42ab      	cmp	r3, r5
 800425a:	dcf2      	bgt.n	8004242 <_printf_i+0x212>
 800425c:	e7eb      	b.n	8004236 <_printf_i+0x206>
 800425e:	2500      	movs	r5, #0
 8004260:	f104 0619 	add.w	r6, r4, #25
 8004264:	e7f5      	b.n	8004252 <_printf_i+0x222>
 8004266:	bf00      	nop
 8004268:	08004401 	.word	0x08004401
 800426c:	08004412 	.word	0x08004412

08004270 <memmove>:
 8004270:	4288      	cmp	r0, r1
 8004272:	b510      	push	{r4, lr}
 8004274:	eb01 0402 	add.w	r4, r1, r2
 8004278:	d902      	bls.n	8004280 <memmove+0x10>
 800427a:	4284      	cmp	r4, r0
 800427c:	4623      	mov	r3, r4
 800427e:	d807      	bhi.n	8004290 <memmove+0x20>
 8004280:	1e43      	subs	r3, r0, #1
 8004282:	42a1      	cmp	r1, r4
 8004284:	d008      	beq.n	8004298 <memmove+0x28>
 8004286:	f811 2b01 	ldrb.w	r2, [r1], #1
 800428a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800428e:	e7f8      	b.n	8004282 <memmove+0x12>
 8004290:	4402      	add	r2, r0
 8004292:	4601      	mov	r1, r0
 8004294:	428a      	cmp	r2, r1
 8004296:	d100      	bne.n	800429a <memmove+0x2a>
 8004298:	bd10      	pop	{r4, pc}
 800429a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800429e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042a2:	e7f7      	b.n	8004294 <memmove+0x24>

080042a4 <_sbrk_r>:
 80042a4:	b538      	push	{r3, r4, r5, lr}
 80042a6:	4d06      	ldr	r5, [pc, #24]	@ (80042c0 <_sbrk_r+0x1c>)
 80042a8:	2300      	movs	r3, #0
 80042aa:	4604      	mov	r4, r0
 80042ac:	4608      	mov	r0, r1
 80042ae:	602b      	str	r3, [r5, #0]
 80042b0:	f7fc fcc2 	bl	8000c38 <_sbrk>
 80042b4:	1c43      	adds	r3, r0, #1
 80042b6:	d102      	bne.n	80042be <_sbrk_r+0x1a>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	b103      	cbz	r3, 80042be <_sbrk_r+0x1a>
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	bd38      	pop	{r3, r4, r5, pc}
 80042c0:	20000280 	.word	0x20000280

080042c4 <memcpy>:
 80042c4:	440a      	add	r2, r1
 80042c6:	4291      	cmp	r1, r2
 80042c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80042cc:	d100      	bne.n	80042d0 <memcpy+0xc>
 80042ce:	4770      	bx	lr
 80042d0:	b510      	push	{r4, lr}
 80042d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042da:	4291      	cmp	r1, r2
 80042dc:	d1f9      	bne.n	80042d2 <memcpy+0xe>
 80042de:	bd10      	pop	{r4, pc}

080042e0 <_realloc_r>:
 80042e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042e4:	4680      	mov	r8, r0
 80042e6:	4615      	mov	r5, r2
 80042e8:	460c      	mov	r4, r1
 80042ea:	b921      	cbnz	r1, 80042f6 <_realloc_r+0x16>
 80042ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042f0:	4611      	mov	r1, r2
 80042f2:	f7ff bc4b 	b.w	8003b8c <_malloc_r>
 80042f6:	b92a      	cbnz	r2, 8004304 <_realloc_r+0x24>
 80042f8:	f7ff fbdc 	bl	8003ab4 <_free_r>
 80042fc:	2400      	movs	r4, #0
 80042fe:	4620      	mov	r0, r4
 8004300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004304:	f000 f81a 	bl	800433c <_malloc_usable_size_r>
 8004308:	4285      	cmp	r5, r0
 800430a:	4606      	mov	r6, r0
 800430c:	d802      	bhi.n	8004314 <_realloc_r+0x34>
 800430e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004312:	d8f4      	bhi.n	80042fe <_realloc_r+0x1e>
 8004314:	4629      	mov	r1, r5
 8004316:	4640      	mov	r0, r8
 8004318:	f7ff fc38 	bl	8003b8c <_malloc_r>
 800431c:	4607      	mov	r7, r0
 800431e:	2800      	cmp	r0, #0
 8004320:	d0ec      	beq.n	80042fc <_realloc_r+0x1c>
 8004322:	42b5      	cmp	r5, r6
 8004324:	462a      	mov	r2, r5
 8004326:	4621      	mov	r1, r4
 8004328:	bf28      	it	cs
 800432a:	4632      	movcs	r2, r6
 800432c:	f7ff ffca 	bl	80042c4 <memcpy>
 8004330:	4621      	mov	r1, r4
 8004332:	4640      	mov	r0, r8
 8004334:	f7ff fbbe 	bl	8003ab4 <_free_r>
 8004338:	463c      	mov	r4, r7
 800433a:	e7e0      	b.n	80042fe <_realloc_r+0x1e>

0800433c <_malloc_usable_size_r>:
 800433c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004340:	1f18      	subs	r0, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	bfbc      	itt	lt
 8004346:	580b      	ldrlt	r3, [r1, r0]
 8004348:	18c0      	addlt	r0, r0, r3
 800434a:	4770      	bx	lr

0800434c <_init>:
 800434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434e:	bf00      	nop
 8004350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004352:	bc08      	pop	{r3}
 8004354:	469e      	mov	lr, r3
 8004356:	4770      	bx	lr

08004358 <_fini>:
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435a:	bf00      	nop
 800435c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435e:	bc08      	pop	{r3}
 8004360:	469e      	mov	lr, r3
 8004362:	4770      	bx	lr
